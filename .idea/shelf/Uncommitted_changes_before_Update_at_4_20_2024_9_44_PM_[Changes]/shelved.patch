Index: src/Game.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.io.*;\r\nimport java.util.Random;\r\nimport java.util.Scanner;\r\nimport java.util.ArrayList;\r\n\r\n/**Class: Game\r\n * @author Team Avengers / Ginette Wilson\r\n * @version 1.0\r\n * Course: ITEC 3860 Spring 2024\r\n * Written: Apr 10, 2024\r\n * This class handles the game logic and user input\r\n */\r\n\r\npublic class Game implements Serializable {\r\n\r\n\r\n    private int currentRoom;\r\n    private transient Scanner scan;\r\n    private boolean gameOver;\r\n    private transient Scanner scanner;\r\n    private Player mainCharacter;\r\n\r\n    // File paths for game elements\r\n    //Ginette Wilson\r\n    private static final String ITEMS_FILE_PATH = \"src/Items.txt\";\r\n    private static final String PUZZLES_FILE_PATH = \"src/Puzzles.txt\";\r\n    private static final String MONSTERS_FILE_PATH = \"src/Monsters.txt\";\r\n    private static final String ROOMS_FILE_PATH = \"src/Rooms.txt\";\r\n    private static final String SPELLS_FILE_PATH = \"src/spells.txt\";\r\n\r\n\r\n    // ArrayList to store game elements\r\n    //Ginette Wilson\r\n    private static final ArrayList<Item> listOfItems = new ArrayList<>();\r\n    private static final ArrayList<Puzzle> listOfPuzzles = new ArrayList<>();\r\n    private static final ArrayList<Monster> listOfMonsters = new ArrayList<>();\r\n    private static final ArrayList<Rooms> listOfRooms = new ArrayList<>();\r\n    private static final ArrayList<Spells> listOfSpells = new ArrayList<>();\r\n\r\n\r\n    //Ginette Wilson\r\n    public Game() {\r\n        loadGameElements();// Initialize the game map\r\n        gameOver = false; // Game over flag\r\n        scanner = new Scanner(System.in); // Scanner for user input\r\n        currentRoom = 0;\r\n        mainCharacter = new Player(25, 10, 10, 7, 20, 5, listOfRooms.get(0));\r\n    }\r\n\r\n    //Method to load game elements\r\n    //Ginette Wilson\r\n    private static void loadGameElements() {\r\n        Item.readItems(ITEMS_FILE_PATH, listOfItems);\r\n        Puzzle.readPuzzles(PUZZLES_FILE_PATH, listOfPuzzles);\r\n        Monster.readMonsters(MONSTERS_FILE_PATH, listOfMonsters);\r\n        addItemsToRoom(listOfItems, listOfRooms);\r\n        addMonstersToRoom(listOfMonsters, listOfRooms);\r\n        addPuzzlesToRoom(listOfPuzzles, listOfRooms);\r\n        Rooms.readRooms(ROOMS_FILE_PATH, listOfRooms);\r\n        Spells.readSpells(SPELLS_FILE_PATH, listOfSpells);\r\n    }\r\n\r\n\r\n    //Method to add puzzles to the room\r\n    //Lincoln Bruce\r\n    public static void addPuzzlesToRoom(ArrayList<Puzzle> listOfPuzzles, ArrayList<Rooms> listOfRooms) {\r\n        for (Rooms room : listOfRooms) {\r\n            for (Puzzle puzzle : listOfPuzzles) {\r\n                if (room.getPuzzleIncluded().contains(puzzle.getPuzzleID())) {\r\n                    room.getRoomPuzzle().add(puzzle);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    //Method to add items to the room\r\n    //Lincoln Bruce\r\n    public static void addItemsToRoom(ArrayList<Item> listOfItems, ArrayList<Rooms> listOfRooms) {\r\n        for (Rooms room : listOfRooms) {\r\n            for (Item item : listOfItems) {\r\n                if (room.getItemsIncluded().contains(item.getItemID())) {\r\n                    room.getRoomInventory().add(item);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    //Method to add monsters to the room\r\n    //Lincoln Bruce\r\n    public static void addMonstersToRoom(ArrayList<Monster> listOfMonsters, ArrayList<Rooms> listOfRooms) {\r\n        for (Rooms room : listOfRooms) {\r\n            for (Monster monster : listOfMonsters) {\r\n                if (room.getMonstersIncluded().contains(monster.getMonsterID())) {\r\n                    room.getRoomMonsters().add(monster);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    //Method to run the game\r\n    //Kenny Amador\r\n    public void RunGame() {\r\n        System.out.println(\"Press q at any time if you wish to quit or y to continue\");\r\n        scan = new Scanner(System.in);\r\n        Rooms currentRooms = listOfRooms.get(currentRoom);\r\n        currentRooms.setHasBeenVisited(true);\r\n        System.out.println(currentRooms.getRoomName() + \": \" + currentRooms.getDescription());\r\n        String command = scan.next();\r\n//        System.out.println(mainCharacter.getPlayerSpells().get(0));\r\n        while (!command.equalsIgnoreCase(\"save\")) {\r\n            System.out.println(\"~~~~~~~~~~\");\r\n            System.out.println(\"Please enter a navigation command north,east,south,west to move around\");\r\n            scan = new Scanner(System.in);\r\n            command = scan.nextLine();\r\n            currentRoom = checkCommand(command, currentRooms, mainCharacter);\r\n            if (currentRoom == -1) {\r\n                System.out.println(\"You cannot go in this direction\");\r\n                continue;\r\n            }\r\n            currentRooms = listOfRooms.get(currentRoom);\r\n            checkRoom(currentRooms);\r\n            System.out.println(currentRooms.getRoomName() + \": \" + currentRooms.getDescription());\r\n            currentRooms.setHasBeenVisited(true);\r\n        }\r\n    }\r\n\r\n    public void checkRoom(Rooms rooms) {\r\n        if (rooms.getHasBeenVisited()) {\r\n            System.out.println(\"You have been here before\");\r\n        }\r\n        if (rooms.getShop()) {\r\n            shop(rooms);\r\n        }\r\n    }\r\n\r\n    public void shop(Rooms rooms) {\r\n        mainCharacter.setPlayerCoins(100);\r\n        System.out.println(\"Would you like to shop or sell?\");\r\n        scan = new Scanner(System.in);\r\n        String command = scan.nextLine();\r\n        if (command.equalsIgnoreCase(\"shop\")) {\r\n            while (!command.equalsIgnoreCase(\"quit\")) {\r\n                System.out.println(\"Which items would you like to buy?\");\r\n                displayItems(rooms);\r\n                command = scan.nextLine();\r\n                buyItem(command, mainCharacter, rooms);\r\n            }\r\n        }\r\n        if (command.equalsIgnoreCase(\"sell\")) {\r\n            System.out.println(\"Which items would you like to sell?\");\r\n            command = scan.nextLine();\r\n            sell(command, mainCharacter, rooms);\r\n\r\n        }\r\n\r\n    }\r\n\r\n    public void buyItem(String itemName, Player mainCharacter, Rooms currentRoom) {\r\n        for (Item item : currentRoom.getRoomInventory()) {\r\n            if (item.getItemName().equalsIgnoreCase(itemName) & mainCharacter.getPlayerCoins() >= item.getItemValue()) {\r\n                mainCharacter.getPlayerInventory().add(item);\r\n                currentRoom.getRoomInventory().remove(item);\r\n                System.out.println(itemName + \" has been added to your inventory.\");\r\n                mainCharacter.setPlayerCoins(mainCharacter.getPlayerCoins() - item.getItemValue());\r\n                return;\r\n            }\r\n        }\r\n        if (itemName.equalsIgnoreCase(\"quit\")) {\r\n            System.out.println(\"~~~~~~~~~~~~~\");\r\n            return;\r\n        }\r\n        System.out.println(\"You do not have enough coins\");\r\n    }\r\n\r\n\r\n    //Method to check the command\r\n    //Kenny Amador\r\n    public int checkCommand(String command, Rooms rooms, Player mainCharacter) {\r\n        ArrayList<Integer> connects = rooms.roomExits;\r\n        if (command.equalsIgnoreCase(\"north\")) {\r\n            return connects.get(0) - 1;\r\n        }\r\n        if (command.equalsIgnoreCase(\"east\")) {\r\n            return connects.get(1) - 1;\r\n        }\r\n        if (command.equalsIgnoreCase(\"south\")) {\r\n            return connects.get(2) - 1;\r\n        }\r\n        if (command.equalsIgnoreCase(\"west\")) {\r\n            return connects.get(3) - 1;\r\n        }\r\n        if (command.equalsIgnoreCase(\"look\")) {\r\n            displayItems(rooms);\r\n            return currentRoom;\r\n        }\r\n        if (command.equalsIgnoreCase(\"solve\")) {\r\n            System.out.println(\"~~~~~~~~~~\");\r\n            System.out.println(\"What is your answer?\");\r\n            command = scan.nextLine();\r\n            mainCharacter.solvePuzzle(command, mainCharacter.getPlayerInventory(), listOfItems, rooms, rooms.getRoomPuzzle());\r\n            return currentRoom;\r\n        }\r\n        if (command.equalsIgnoreCase(\"inspect\")) {\r\n            System.out.println(\"~~~~~~~~~~\");\r\n            System.out.println(\"Which item would you like to inspect?\");\r\n            command = scan.nextLine();\r\n            inspectItem(command, mainCharacter);\r\n            return currentRoom;\r\n        }\r\n        if (command.equalsIgnoreCase(\"pickup\")) {\r\n            System.out.println(\"~~~~~~~~~~\");\r\n            System.out.println(\"Which item would you like to pick up?\");\r\n            command = scan.nextLine();\r\n            pickup(command, mainCharacter, rooms);\r\n            return currentRoom;\r\n        }\r\n        if (command.equalsIgnoreCase(\"drop\")) {\r\n            System.out.println(\"~~~~~~~~~~\");\r\n            System.out.println(\"Which item would you like to drop?\");\r\n            command = scan.nextLine();\r\n            drop(command, mainCharacter, rooms);\r\n            return currentRoom;\r\n        }\r\n        if (command.equalsIgnoreCase(\"consume\")) {\r\n            System.out.println(\"~~~~~~~~~~\");\r\n            System.out.println(\"Which item would you like to consume?\");\r\n            command = scan.nextLine();\r\n            consume(command, mainCharacter);\r\n            return currentRoom;\r\n\r\n        }\r\n        if (command.equalsIgnoreCase(\"equip\")) {\r\n            System.out.println(\"~~~~~~~~~~\");\r\n            System.out.println(\"Which item would you like to equip?\");\r\n            command = scan.nextLine();  // continues to use command variable\r\n            mainCharacter.equipItem(command);\r\n            return currentRoom;\r\n        }\r\n        if (command.equalsIgnoreCase(\"unequip\")) {\r\n            mainCharacter.unequipItem();\r\n            return currentRoom;\r\n        }\r\n        if (command.equalsIgnoreCase(\"inventory\")) {\r\n            mainCharacter.inventory();\r\n            return currentRoom;\r\n        }\r\n        if (command.equalsIgnoreCase(\"stats\")) {\r\n            displayStats();\r\n            return currentRoom;\r\n        }\r\n        if (command.equalsIgnoreCase(\"save\")) {\r\n            return currentRoom;\r\n        }\r\n        if (command.equalsIgnoreCase(\"examine\")) {\r\n            examine(rooms);\r\n            return currentRoom;\r\n        }\r\n        if (command.equalsIgnoreCase(\"teleport\")) {\r\n            System.out.println(\"~~~~~~~~~~\");\r\n            System.out.println(\"Where would you like to teleport to?\");\r\n            String roomName = scanner.nextLine();\r\n            teleport(roomName);\r\n            return currentRoom;\r\n        }\r\n        if (command.equalsIgnoreCase(\"items\")) {\r\n            mainCharacter.inventory();\r\n            return currentRoom;\r\n        }\r\n        if (command.equalsIgnoreCase(\"help\")) {\r\n            helpCommand();\r\n            return currentRoom;\r\n        }\r\n        if (command.equalsIgnoreCase(\"fight\")) {\r\n            System.out.println(\"~~~~~~~~~~\");\r\n            System.out.println(\"Which monster would you like to fight?\");\r\n            command = scan.nextLine();\r\n            attackMonster(command, mainCharacter, rooms);\r\n            return currentRoom;\r\n\r\n        }\r\n        if (command.equalsIgnoreCase(\"Eye of truth\")) {\r\n            eyeOfTruth(rooms);\r\n            return currentRoom;\r\n        }\r\n\r\n        return -1;\r\n    }\r\n\r\n\r\n    //Method to print monster stats\r\n    //Ginette Wilson\r\n    public void examine(Rooms currentRoom) {\r\n        for (Monster monster : currentRoom.getRoomMonsters()) {\r\n            System.out.println(\"~~~~~~~~~~\");\r\n            System.out.println(\"Name: \" + monster.getName());\r\n            System.out.println(\"Description: \" + monster.getDescription());\r\n            System.out.println(\"Health Points: \" + monster.getHealth());\r\n            System.out.println(\"Attack Damage: \" + monster.getAttack());\r\n            System.out.println(\"Dexterity: \" + monster.getDexterity());\r\n            System.out.println(\"Speed: \" + monster.getSpeed());\r\n            System.out.println(\"~~~~~~~~~~\");\r\n        }\r\n    }\r\n\r\n\r\n    //Method to display items in the room\r\n    //Kenny Amador\r\n    public void displayItems(Rooms rooms) {\r\n        if (rooms.itemsIncluded.get(0).equalsIgnoreCase(\"n/a\")) {\r\n            System.out.println(\"~~~~~~~~~~\");\r\n            System.out.println(\"There are no items in this room\");\r\n        } else if (rooms.getShop()) {\r\n            for (Item item : rooms.getRoomInventory()) {\r\n                System.out.println(\"[\" + item + \"]\" + \" cost: \" + item.getItemValue());\r\n            }\r\n            System.out.println(\"~~~~~~~~~~\");\r\n        } else {\r\n            System.out.print(\"Items in this room: \");\r\n            for (Item item : rooms.getRoomInventory()) {\r\n                System.out.println(\"[\" + item + \"]\");\r\n            }\r\n            System.out.println(\"~~~~~~~~~~\");\r\n        }\r\n    }//end displayItems\r\n\r\n    // Method to display puzzle\r\n    // Thuy Vy Pham\r\n    public void displayPuzzle(Rooms currentRoom) {\r\n        System.out.println(\"~~~~~ Puzzle ~~~~~\");\r\n        System.out.println(\"You have encountered a puzzle in this room.\");\r\n        System.out.println(\"~~~~~~~~~~\");\r\n        System.out.println(\"Puzzle: \" + currentRoom.getRoomPuzzle().get(0).getName());\r\n        System.out.println(\"Description: \" + currentRoom.getRoomPuzzle().get(0).getDescription());\r\n        System.out.println(\"~~~~~~~~~~\");\r\n        System.out.println(\"Enter 'solve' to solve the puzzle.\");\r\n    }\r\n\r\n\r\n\r\n    // Method to inspect an item in the current room\r\n    //Huyen Pham\r\n    public void inspectItem(String itemName, Player mainCharacter) {\r\n        for (Item item : mainCharacter.getPlayerInventory()) {\r\n            if (item.getItemName().equalsIgnoreCase(itemName)) {\r\n                System.out.println(\"Inspecting: \" + itemName);\r\n                System.out.println(\"Description: \" + item.getItemDescription());\r\n                System.out.println(\"Type: \" + item.getItemType());\r\n                System.out.println(\"Value: \" + item.getItemValue());\r\n                System.out.println(\"~~~~~~~~~~\");\r\n                return;\r\n            }\r\n        }\r\n        System.out.println(itemName + \" is not in your inventory.\");\r\n    }//end inspectItem\r\n\r\n    public void sell(String itemName, Player mainCharacter, Rooms currentRoom) {\r\n        for (Item item : mainCharacter.getPlayerInventory()) {\r\n            if (item.getItemName().equalsIgnoreCase(itemName)) {\r\n                mainCharacter.getPlayerInventory().remove(item);\r\n                currentRoom.getRoomInventory().add(item);\r\n                System.out.println(itemName + \" has been dropped from your inventory.\");\r\n                mainCharacter.setPlayerCoins(mainCharacter.getPlayerCoins() + item.getItemValue());\r\n                System.out.println(mainCharacter.getPlayerCoins());\r\n                return;\r\n            }\r\n        }\r\n        if (itemName.equalsIgnoreCase(\"quit\")) {\r\n            System.out.println(\"~~~~~~~~~~\");\r\n        }\r\n        System.out.println(\"You have nothing to sell\");\r\n    }\r\n\r\n    //Method to drop an item\r\n    //Thuy Vy\r\n    public void drop(String itemName, Player mainCharacter, Rooms currentRoom) {\r\n        for (Item item : mainCharacter.getPlayerInventory()) {\r\n            if (item.getItemName().equalsIgnoreCase(itemName)) {\r\n                System.out.println(itemName + \" has been dropped from your inventory.\");\r\n                checkAuraDrop(item, mainCharacter);\r\n                mainCharacter.getPlayerInventory().remove(item);\r\n                currentRoom.getRoomInventory().add(item);\r\n                return;\r\n            }\r\n        }\r\n        System.out.println(\"You don't have \" + itemName + \" in your inventory.\");\r\n    }//end drop\r\n\r\n    //Method to pick up an item\r\n    //Thuy Vy\r\n    public void pickup(String itemName, Player mainCharacter, Rooms currentRoom) {\r\n        for (Item item : currentRoom.getRoomInventory()) {\r\n            if (item.getItemName().equalsIgnoreCase(itemName)) {\r\n                mainCharacter.getPlayerInventory().add(item);\r\n                currentRoom.getRoomInventory().remove(item);\r\n                System.out.println(itemName + \" has been added to your inventory.\");\r\n                checkAura(item, mainCharacter);\r\n                return;\r\n            }\r\n        }\r\n        System.out.println(\"There is no \" + itemName + \" in this room.\");\r\n    }\r\n\r\n    //Method to check if the item picked up is an aura\r\n    //Lincoln Bruce\r\n    public void checkAura(Item item, Player mainCharacter) {\r\n        for (Item aura : mainCharacter.getPlayerInventory()) {\r\n            if (aura.getItemType().equalsIgnoreCase(\"aura\")) {\r\n                if (item instanceof Aura) {\r\n                    Aura auraItem = (Aura) item;\r\n                    System.out.println(\"This item boost your stats from the inventory\");\r\n                    mainCharacter.setMagic(mainCharacter.getMagic() + auraItem.getAddedMagic());\r\n                    mainCharacter.setDexterity(mainCharacter.getDexterity() + auraItem.getAddedDex());\r\n                    mainCharacter.setDefense(mainCharacter.getDefense() + auraItem.getAddedDefense());\r\n                    System.out.println(\"Your magic has been boosted by \" + auraItem.getAddedMagic());\r\n                    System.out.println(\"Your dexterity has been boosted by \" + auraItem.getAddedDex());\r\n                    System.out.println(\"Your defense has been boosted by \" + auraItem.getAddedDefense());\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    //Method to check if the item dropped is an aura\r\n    //Lincoln Bruce\r\n    public void checkAuraDrop(Item item, Player mainCharacter) {\r\n        for (Item aura : mainCharacter.getPlayerInventory()) {\r\n            if (aura.getItemType().equalsIgnoreCase(\"aura\")) {\r\n                if (item instanceof Aura) {\r\n                    Aura auraItem = (Aura) item;\r\n                    System.out.println(\"You lost your boosts\");\r\n                    mainCharacter.setMagic(mainCharacter.getMagic() - auraItem.getAddedMagic());\r\n                    mainCharacter.setDexterity(mainCharacter.getDexterity() - auraItem.getAddedDex());\r\n                    mainCharacter.setDefense(mainCharacter.getDefense() - auraItem.getAddedDefense());\r\n                    System.out.println(\"Your magic has been reduced by \" + auraItem.getAddedMagic());\r\n                    System.out.println(\"Your dexterity has been reduced by \" + auraItem.getAddedDex());\r\n                    System.out.println(\"Your defense has been reduced by \" + auraItem.getAddedDefense());\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    //method to be teleported to a room\r\n    //Ginette Wilson\r\n    public void teleport(String roomName) {\r\n        boolean roomFound = false;\r\n        for (Rooms room : listOfRooms) {\r\n            if (room.getRoomName().equalsIgnoreCase(roomName) && room.getHasBeenVisited()) {\r\n                roomFound = true;\r\n                currentRoom = room.getRoomID() - 1;\r\n                System.out.println(\"Teleported to: \" + roomName);\r\n                return;\r\n            }\r\n        }\r\n        if (!roomFound) {\r\n            System.out.println(\"Room \" + roomName + \" not found or hasn't been visited yet.\");\r\n        }\r\n    }\r\n\r\n    //method to use healing items\r\n    //Ginette\r\n    public void consume(String itemName, Player player) {\r\n        for (Item item : player.getPlayerInventory()) {\r\n            if (item.getItemName().equalsIgnoreCase(itemName)) {\r\n                if (item instanceof Consumable) {\r\n                    Consumable consumable = (Consumable) item;\r\n                    if (((Consumable) item).getHealedHealth() == 900) {\r\n                        int healedHealth = player.getMaxHealth() / 2;\r\n                        // Remove item from inventory\r\n                        player.getPlayerInventory().remove(item);\r\n                        System.out.println(itemName + \" has been used.\");\r\n                        // Recover player's health\r\n                        player.setHealth(player.getHealth() + healedHealth);\r\n                        System.out.println(\"You have been healed for \" + healedHealth + \" HP.\");\r\n                        return;\r\n                    } else if (((Consumable) item).getHealedMana() == 900) {\r\n                        int healedMana = player.getMaxMana() / 2;\r\n                        // Remove item from inventory\r\n                        player.getPlayerInventory().remove(item);\r\n                        System.out.println(itemName + \" has been used.\");\r\n                        // Recover player's mana\r\n                        player.setMana(player.getMana() + healedMana);\r\n                        System.out.println(\"You have been healed for \" + healedMana + \" MP.\");\r\n                        return;\r\n                    } else if (((Consumable) item).getHealedHealth() == 500) {\r\n                        player.setHealth(player.getMaxHealth());\r\n                        player.getPlayerInventory().remove(item);\r\n                        System.out.println(itemName + \" has been used.\");\r\n                        System.out.println(\"You have been healed to full health.\");\r\n                    } else if (((Consumable) item).getHealedMana() == 500) {\r\n                        player.setMana(player.getMaxMana());\r\n                        player.getPlayerInventory().remove(item);\r\n                        System.out.println(itemName + \" has been used.\");\r\n                        System.out.println(\"You have been healed to full mana.\");\r\n                    } else {\r\n                        int healedHealth = consumable.getHealedHealth();\r\n                        int healedMana = consumable.getHealedMana();\r\n                        // Remove item from inventory\r\n                        player.getPlayerInventory().remove(item);\r\n                        System.out.println(itemName + \" has been used.\");\r\n                        // Recover player's health and mana\r\n                        player.setHealth(player.getHealth() + healedHealth);\r\n                        player.setMana(player.getMana() + healedMana);\r\n                        System.out.println(\"You have been healed for \" + healedHealth + \" HP and \" + healedMana + \" MP.\");\r\n                        return;\r\n                    }\r\n\r\n                } else {\r\n                    System.out.println(itemName + \" is not a healing item.\");\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n        System.out.println(itemName + \" not found in inventory.\");\r\n    }\r\n\r\n    // method to use damaging items\r\n    //Ginette Wilson\r\n    public void throwItem(String itemName, Monster monster, Player player) {\r\n        for (Item item : player.getPlayerInventory()) {\r\n            if (item.getItemName().equalsIgnoreCase(itemName)) {\r\n                if (item instanceof Throwable) {\r\n                    Throwable throwable = (Throwable) item;\r\n                    int damageDealt = throwable.getDamageDealt();\r\n                    int dexReduction = throwable.getSpeedReduction();\r\n                    // Remove item from inventory\r\n                    player.getPlayerInventory().remove(item);\r\n                    System.out.println(itemName + \" has been used.\");\r\n                    // Deal damage to the monster\r\n                    monster.setHealth(monster.getHealth() - damageDealt);\r\n                    monster.setDexterity(monster.getDexterity() - dexReduction);\r\n                    System.out.println(\"You dealt \" + damageDealt + \" damage to the monster.\");\r\n                    System.out.println(\"You dealt \" + dexReduction + \" dexterity to the monster.\");\r\n                    return;\r\n                } else {\r\n                    System.out.println(itemName + \" is not a damaging item.\");\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n        System.out.println(itemName + \" not found in inventory.\");\r\n    }\r\n\r\n    // Method to display player stats\r\n    //Kenny Amador\r\n    public void displayStats() {\r\n        System.out.println(\"~~~~~~~~~~\");\r\n        System.out.println(\"Health: \" + mainCharacter.getHealth() / mainCharacter.getMaxHealth());\r\n        System.out.println(\"Magic: \" + mainCharacter.getMagic());\r\n        System.out.println(\"Dexterity: \" + mainCharacter.getDexterity());\r\n        System.out.println(\"Speed: \" + mainCharacter.getSpeed());\r\n        System.out.println(\"Mana: \" + mainCharacter.getMana() / mainCharacter.getMaxMana());\r\n        System.out.println(\"Defense: \" + mainCharacter.getDefense());\r\n        System.out.println(\"Coins: \" + mainCharacter.getPlayerCoins());\r\n        System.out.println(\"Experience: \" + mainCharacter.getPlayerExp() / mainCharacter.getPlayerMaxExp());\r\n        System.out.println(\"~~~~~~~~~~\");\r\n    }\r\n\r\n    // Method for player to attack a monster\r\n    //Lincoln Bruce\r\n    public void attackMonster(String monsterName, Player mainCharacter, Rooms currentRoom) {\r\n        for (Monster monster : currentRoom.getRoomMonsters()) {\r\n            if (monster.getName().equalsIgnoreCase(monsterName)) {\r\n                mainCharacter.setInBattle(true);\r\n                System.out.println(\"You are now in battle with the \" + monsterName);\r\n                while (mainCharacter.getInBattle()) {\r\n                    if (mainCharacter.getHealth() <= 0) {\r\n                        System.out.println(\"You have been defeated by the \" + monsterName);\r\n                        mainCharacter.setInBattle(false);\r\n                        break;\r\n                    } else if (monster.getHealth() <= 0) {\r\n                        System.out.println(\"You have defeated the \" + monsterName);\r\n                        System.out.println(\"~~~~~~~~~~\");\r\n                        mainCharacter.setPlayerExp(mainCharacter.getPlayerExp() + monster.getExpDrop());\r\n                        System.out.println(\"You have gained \" + monster.getExpDrop() + \" experience points.\");\r\n                        System.out.println(\"~~~~~~~~~~\");\r\n                        mainCharacter.setPlayerCoins(mainCharacter.getPlayerCoins() + monster.getGoldDrop());\r\n                        System.out.println(\"You have gained \" + monster.getGoldDrop() + \" coins.\");\r\n                        System.out.println(\"~~~~~~~~~~\");\r\n                        mainCharacter.levelUp(listOfSpells);\r\n                        mainCharacter.setInBattle(false);\r\n                        break;\r\n                    } else {\r\n                        System.out.println(\"Choose an action: attack, consume, or escape\");\r\n                        String action = scanner.nextLine();\r\n                        if (action.equalsIgnoreCase(\"attack\")) {\r\n                            dealDamage(monster);\r\n                            dealDamage2(monster);\r\n                        } else if (action.equalsIgnoreCase(\"consume\")) {\r\n                            System.out.println(\"Which item would you like to consume?\");\r\n                            String itemToConsume = scanner.nextLine();\r\n                            consume(itemToConsume, mainCharacter);\r\n                        } else if (action.equalsIgnoreCase(\"escape\")) {\r\n                            mainCharacter.escape(currentRoom, mainCharacter.getInBattle());\r\n                        } else if (action.equalsIgnoreCase(\"throw\")) {\r\n                            System.out.println(\"Which item would you like to throw?\");\r\n                            String itemToThrow = scanner.nextLine();\r\n                            throwItem(itemToThrow, monster, mainCharacter);\r\n                        } else if (action.equalsIgnoreCase(\"spells\")) {\r\n                            System.out.println(\"Which spell will you like to case\");\r\n                            String spells = scanner.nextLine();\r\n                            activateSpells(spells, monster, mainCharacter);\r\n                        } else {\r\n                            System.out.println(\"You can't do that in battle. Please try again.\");\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // Method for the player to deal damage to a monster\r\n    public void dealDamage(Monster monster) {\r\n        mainCharacter.setHitRate((4 * mainCharacter.getDexterity() + mainCharacter.getBaseHitRate()) - monster.getAvoidRate());\r\n        if (mainCharacter.getHitRate() > 50) {\r\n            monster.setHealth(monster.getHealth() - mainCharacter.getMagic());\r\n            System.out.println(\"You dealt \" + mainCharacter.getMagic() + \" damage to the monster.\");\r\n        } else {\r\n            System.out.println(\"You missed the monster.\");\r\n        }\r\n    }\r\n\r\n    //Method for the monster to deal damage to the player\r\n    public void dealDamage2(Monster monster) {\r\n        monster.setHitRate((4 * monster.getDexterity()) - mainCharacter.getAvoidRate());\r\n        if (monster.getHitRate() > 50) {\r\n            mainCharacter.setHealth(mainCharacter.getHealth() - monster.getAttack());\r\n            System.out.println(\"The monster dealt \" + monster.getAttack() + \" damage to you.\");\r\n        } else {\r\n            System.out.println(\"The monster missed you.\");\r\n        }\r\n    }\r\n\r\n\r\n    //help command\r\n    public void helpCommand() {\r\n        System.out.println(\"(north,east,south,west)--move around\");\r\n        System.out.println(\"(look)--examine the room\");\r\n        System.out.println(\"(inspect)--inspect an item\");\r\n        System.out.println(\"(pickup)--pickup an item\");\r\n        System.out.println(\"(drop)--drop an item\");\r\n        System.out.println(\"(equip)--equip an item\");\r\n        System.out.println(\"(unequip)--unequip an item\");\r\n        System.out.println(\"(stats)--view player stats\");\r\n        System.out.println(\"(save)--save current progress\");\r\n        System.out.println(\"(inventory)--view inventory\");\r\n        System.out.println(\"(consume)--consume an item\");\r\n        System.out.println(\"(fight)--fight a monster\");\r\n        System.out.println(\"(teleport)--teleport to a room\");\r\n    }\r\n\r\n\r\n    public void eyeOfTruth(Rooms currentRoom) {\r\n        if (!currentRoom.getPuzzleIncluded().contains(\"N/A\")) {\r\n            System.out.println(listOfPuzzles.get(listOfRooms.indexOf(currentRoom)).getHint());\r\n        } else {\r\n            System.out.println(\"There are no puzzles in this room\");\r\n        }\r\n    }\r\n\r\n    public void activateSpells(String spellName, Monster monster, Player mainCharacter) {\r\n        if (spellName.equalsIgnoreCase(\"Ray of fire\")) {\r\n            for (Spells spell : listOfSpells) {\r\n                if (mainCharacter.getPlayerLevel() >= spell.getLevelNeeded() & spell.getName().equalsIgnoreCase(spellName)) {\r\n                    monster.setHealth(monster.getHealth() - spell.getEffects());\r\n                    mainCharacter.setMana(mainCharacter.getMana() - spell.getManaCost());\r\n                }\r\n            }\r\n        }//end if\r\n        if(spellName.equalsIgnoreCase(\"Flame Shield\")){\r\n            for (Spells spell : listOfSpells) {\r\n                if (mainCharacter.getPlayerLevel() >= spell.getLevelNeeded() & spell.getName().equalsIgnoreCase(spellName)) {\r\n                    mainCharacter.setDefense(mainCharacter.getDefense() + spell.getEffects());\r\n                    mainCharacter.setMana(mainCharacter.getMana() - spell.getManaCost());\r\n                }\r\n            }\r\n        }//end if\r\n\r\n        if(spellName.equalsIgnoreCase(\"Heat Wave\")){\r\n            for (Spells spell : listOfSpells) {\r\n                if (mainCharacter.getPlayerLevel() >= spell.getLevelNeeded() & spell.getName().equalsIgnoreCase(spellName)) {\r\n                    mainCharacter.setDefense(mainCharacter.getDefense() + spell.getEffects());\r\n                    mainCharacter.setDefense(mainCharacter.getDefense() - spell.getEffects());\r\n                    mainCharacter.setMana(mainCharacter.getMana() - spell.getManaCost());\r\n                }\r\n            }\r\n        }\r\n        if(spellName.equalsIgnoreCase(\"Meteor Storm\")){\r\n            Random random = new Random();\r\n            int meteors = random.nextInt();\r\n            for (Spells spell : listOfSpells) {\r\n                if (mainCharacter.getPlayerLevel() >= spell.getLevelNeeded() & spell.getName().equalsIgnoreCase(spellName)) {\r\n                    mainCharacter.setHealth(mainCharacter.getMaxHealth() - (meteors * spell.getEffects()));\r\n                    mainCharacter.setMana(mainCharacter.getMana() - spell.getManaCost());\r\n                }\r\n            }\r\n        }\r\n        if(spellName.equalsIgnoreCase(\"flame master\")){\r\n            for (Spells spell : listOfSpells) {\r\n                if (mainCharacter.getPlayerLevel() >= spell.getLevelNeeded() & spell.getName().equalsIgnoreCase(spellName)) {\r\n                    mainCharacter.setHealth(mainCharacter.getHealth() + spell.getEffects());\r\n                    mainCharacter.setDefense(mainCharacter.getDefense() + spell.getEffects());\r\n                    mainCharacter.setMana(mainCharacter.getMana() - spell.getManaCost());\r\n                }\r\n            }\r\n        }\r\n\r\n        if(spellName.equalsIgnoreCase(\"Ice Shield\")) {\r\n            for (Spells spell : listOfSpells) {\r\n                if (mainCharacter.getPlayerLevel() >= spell.getLevelNeeded() & spell.getName().equalsIgnoreCase(spellName)) {\r\n                    mainCharacter.setDefense(mainCharacter.getDefense() + spell.getEffects());\r\n                    mainCharacter.setMana(mainCharacter.getMana() - spell.getManaCost());\r\n                }\r\n            }\r\n        }\r\n        else{\r\n            System.out.println(\"You cannot use this spell\");\r\n        }\r\n    }\r\n\r\n}//end Game
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Game.java b/src/Game.java
--- a/src/Game.java	(revision 5fe09e11dbe727b0f3527ed388757f2d072987e0)
+++ b/src/Game.java	(date 1713663705986)
@@ -1,5 +1,4 @@
 import java.io.*;
-import java.util.Random;
 import java.util.Scanner;
 import java.util.ArrayList;
 
@@ -26,7 +25,7 @@
     private static final String PUZZLES_FILE_PATH = "src/Puzzles.txt";
     private static final String MONSTERS_FILE_PATH = "src/Monsters.txt";
     private static final String ROOMS_FILE_PATH = "src/Rooms.txt";
-    private static final String SPELLS_FILE_PATH = "src/spells.txt";
+    private static final String SPELLS_FILE_PATH = "src/Spells.txt";
 
 
     // ArrayList to store game elements
@@ -41,6 +40,7 @@
     //Ginette Wilson
     public Game() {
         loadGameElements();// Initialize the game map
+        System.out.println(listOfRooms.get(2).getRoomPuzzle());
         gameOver = false; // Game over flag
         scanner = new Scanner(System.in); // Scanner for user input
         currentRoom = 0;
@@ -53,13 +53,12 @@
         Item.readItems(ITEMS_FILE_PATH, listOfItems);
         Puzzle.readPuzzles(PUZZLES_FILE_PATH, listOfPuzzles);
         Monster.readMonsters(MONSTERS_FILE_PATH, listOfMonsters);
+        Rooms.readRooms(ROOMS_FILE_PATH, listOfRooms);
+        Spells.readSpells(SPELLS_FILE_PATH, listOfSpells);
         addItemsToRoom(listOfItems, listOfRooms);
         addMonstersToRoom(listOfMonsters, listOfRooms);
         addPuzzlesToRoom(listOfPuzzles, listOfRooms);
-        Rooms.readRooms(ROOMS_FILE_PATH, listOfRooms);
-        Spells.readSpells(SPELLS_FILE_PATH, listOfSpells);
     }
-
 
     //Method to add puzzles to the room
     //Lincoln Bruce
@@ -106,7 +105,6 @@
         currentRooms.setHasBeenVisited(true);
         System.out.println(currentRooms.getRoomName() + ": " + currentRooms.getDescription());
         String command = scan.next();
-//        System.out.println(mainCharacter.getPlayerSpells().get(0));
         while (!command.equalsIgnoreCase("save")) {
             System.out.println("~~~~~~~~~~");
             System.out.println("Please enter a navigation command north,east,south,west to move around");
@@ -123,49 +121,50 @@
             currentRooms.setHasBeenVisited(true);
         }
     }
-
-    public void checkRoom(Rooms rooms) {
-        if (rooms.getHasBeenVisited()) {
+    public void checkRoom(Rooms rooms){
+        if (rooms.getHasBeenVisited()){
             System.out.println("You have been here before");
         }
-        if (rooms.getShop()) {
+        if(rooms.getShop()){
             shop(rooms);
         }
+//        if (rooms.getRoomPuzzle() != null) {
+//            mainCharacter.displayPuzzle(rooms);
+//        }
     }
 
-    public void shop(Rooms rooms) {
+    public void shop(Rooms rooms){
         mainCharacter.setPlayerCoins(100);
         System.out.println("Would you like to shop or sell?");
         scan = new Scanner(System.in);
         String command = scan.nextLine();
-        if (command.equalsIgnoreCase("shop")) {
-            while (!command.equalsIgnoreCase("quit")) {
+        if(command.equalsIgnoreCase("shop")){
+            while(!command.equalsIgnoreCase("quit")){
                 System.out.println("Which items would you like to buy?");
                 displayItems(rooms);
                 command = scan.nextLine();
-                buyItem(command, mainCharacter, rooms);
+                buyItem(command,mainCharacter,rooms);
             }
         }
-        if (command.equalsIgnoreCase("sell")) {
+        if(command.equalsIgnoreCase("sell")){
             System.out.println("Which items would you like to sell?");
             command = scan.nextLine();
-            sell(command, mainCharacter, rooms);
+            sell(command,mainCharacter,rooms);
 
         }
 
     }
-
-    public void buyItem(String itemName, Player mainCharacter, Rooms currentRoom) {
+    public void buyItem(String itemName, Player mainCharacter, Rooms currentRoom){
         for (Item item : currentRoom.getRoomInventory()) {
             if (item.getItemName().equalsIgnoreCase(itemName) & mainCharacter.getPlayerCoins() >= item.getItemValue()) {
                 mainCharacter.getPlayerInventory().add(item);
                 currentRoom.getRoomInventory().remove(item);
                 System.out.println(itemName + " has been added to your inventory.");
-                mainCharacter.setPlayerCoins(mainCharacter.getPlayerCoins() - item.getItemValue());
+                mainCharacter.setPlayerCoins(mainCharacter.getPlayerCoins() -item.getItemValue());
                 return;
             }
         }
-        if (itemName.equalsIgnoreCase("quit")) {
+        if(itemName.equalsIgnoreCase("quit")){
             System.out.println("~~~~~~~~~~~~~");
             return;
         }
@@ -191,13 +190,15 @@
         }
         if (command.equalsIgnoreCase("look")) {
             displayItems(rooms);
+            displayPuzzle(rooms);
+
             return currentRoom;
         }
         if (command.equalsIgnoreCase("solve")) {
             System.out.println("~~~~~~~~~~");
             System.out.println("What is your answer?");
             command = scan.nextLine();
-            mainCharacter.solvePuzzle(command, mainCharacter.getPlayerInventory(), listOfItems, rooms, rooms.getRoomPuzzle());
+            mainCharacter.solvePuzzle(command,mainCharacter.getPlayerInventory(),listOfItems,rooms,rooms.getRoomPuzzle());
             return currentRoom;
         }
         if (command.equalsIgnoreCase("inspect")) {
@@ -244,7 +245,7 @@
             mainCharacter.inventory();
             return currentRoom;
         }
-        if (command.equalsIgnoreCase("stats")) {
+        if(command.equalsIgnoreCase("stats")){
             displayStats();
             return currentRoom;
         }
@@ -266,7 +267,7 @@
             mainCharacter.inventory();
             return currentRoom;
         }
-        if (command.equalsIgnoreCase("help")) {
+        if(command.equalsIgnoreCase("help")){
             helpCommand();
             return currentRoom;
         }
@@ -278,10 +279,6 @@
             return currentRoom;
 
         }
-        if (command.equalsIgnoreCase("Eye of truth")) {
-            eyeOfTruth(rooms);
-            return currentRoom;
-        }
 
         return -1;
     }
@@ -309,15 +306,15 @@
         if (rooms.itemsIncluded.get(0).equalsIgnoreCase("n/a")) {
             System.out.println("~~~~~~~~~~");
             System.out.println("There are no items in this room");
-        } else if (rooms.getShop()) {
+        } else if(rooms.getShop()){
             for (Item item : rooms.getRoomInventory()) {
-                System.out.println("[" + item + "]" + " cost: " + item.getItemValue());
+                System.out.println("["+ item + "]" + " cost: " + item.getItemValue());
             }
             System.out.println("~~~~~~~~~~");
-        } else {
+        }else {
             System.out.print("Items in this room: ");
             for (Item item : rooms.getRoomInventory()) {
-                System.out.println("[" + item + "]");
+                System.out.println("["+ item + "]");
             }
             System.out.println("~~~~~~~~~~");
         }
@@ -335,8 +332,6 @@
         System.out.println("Enter 'solve' to solve the puzzle.");
     }
 
-
-
     // Method to inspect an item in the current room
     //Huyen Pham
     public void inspectItem(String itemName, Player mainCharacter) {
@@ -352,19 +347,18 @@
         }
         System.out.println(itemName + " is not in your inventory.");
     }//end inspectItem
-
     public void sell(String itemName, Player mainCharacter, Rooms currentRoom) {
         for (Item item : mainCharacter.getPlayerInventory()) {
             if (item.getItemName().equalsIgnoreCase(itemName)) {
                 mainCharacter.getPlayerInventory().remove(item);
                 currentRoom.getRoomInventory().add(item);
                 System.out.println(itemName + " has been dropped from your inventory.");
-                mainCharacter.setPlayerCoins(mainCharacter.getPlayerCoins() + item.getItemValue());
+                mainCharacter.setPlayerCoins(mainCharacter.getPlayerCoins()+item.getItemValue());
                 System.out.println(mainCharacter.getPlayerCoins());
                 return;
             }
         }
-        if (itemName.equalsIgnoreCase("quit")) {
+        if(itemName.equalsIgnoreCase("quit")){
             System.out.println("~~~~~~~~~~");
         }
         System.out.println("You have nothing to sell");
@@ -403,20 +397,20 @@
     //Method to check if the item picked up is an aura
     //Lincoln Bruce
     public void checkAura(Item item, Player mainCharacter) {
-        for (Item aura : mainCharacter.getPlayerInventory()) {
-            if (aura.getItemType().equalsIgnoreCase("aura")) {
-                if (item instanceof Aura) {
-                    Aura auraItem = (Aura) item;
-                    System.out.println("This item boost your stats from the inventory");
-                    mainCharacter.setMagic(mainCharacter.getMagic() + auraItem.getAddedMagic());
-                    mainCharacter.setDexterity(mainCharacter.getDexterity() + auraItem.getAddedDex());
-                    mainCharacter.setDefense(mainCharacter.getDefense() + auraItem.getAddedDefense());
-                    System.out.println("Your magic has been boosted by " + auraItem.getAddedMagic());
-                    System.out.println("Your dexterity has been boosted by " + auraItem.getAddedDex());
-                    System.out.println("Your defense has been boosted by " + auraItem.getAddedDefense());
-                }
-            }
-        }
+       for (Item aura : mainCharacter.getPlayerInventory()) {
+           if (aura.getItemType().equalsIgnoreCase("aura")) {
+               if (item instanceof Aura) {
+                   Aura auraItem = (Aura) item;
+                   System.out.println("This item boost your stats from the inventory");
+                   mainCharacter.setMagic(mainCharacter.getMagic() + auraItem.getAddedMagic());
+                   mainCharacter.setDexterity(mainCharacter.getDexterity() + auraItem.getAddedDex());
+                   mainCharacter.setDefense(mainCharacter.getDefense() + auraItem.getAddedDefense());
+                   System.out.println("Your magic has been boosted by " + auraItem.getAddedMagic());
+                   System.out.println("Your dexterity has been boosted by " + auraItem.getAddedDex());
+                   System.out.println("Your defense has been boosted by " + auraItem.getAddedDefense());
+               }
+           }
+       }
     }
 
     //Method to check if the item dropped is an aura
@@ -454,7 +448,6 @@
             System.out.println("Room " + roomName + " not found or hasn't been visited yet.");
         }
     }
-
     //method to use healing items
     //Ginette
     public void consume(String itemName, Player player) {
@@ -471,7 +464,8 @@
                         player.setHealth(player.getHealth() + healedHealth);
                         System.out.println("You have been healed for " + healedHealth + " HP.");
                         return;
-                    } else if (((Consumable) item).getHealedMana() == 900) {
+                    }
+                    else if (((Consumable) item).getHealedMana() == 900) {
                         int healedMana = player.getMaxMana() / 2;
                         // Remove item from inventory
                         player.getPlayerInventory().remove(item);
@@ -480,17 +474,20 @@
                         player.setMana(player.getMana() + healedMana);
                         System.out.println("You have been healed for " + healedMana + " MP.");
                         return;
-                    } else if (((Consumable) item).getHealedHealth() == 500) {
+                    }
+                    else if (((Consumable) item).getHealedHealth() == 500) {
                         player.setHealth(player.getMaxHealth());
                         player.getPlayerInventory().remove(item);
                         System.out.println(itemName + " has been used.");
                         System.out.println("You have been healed to full health.");
-                    } else if (((Consumable) item).getHealedMana() == 500) {
+                    }
+                    else if (((Consumable) item).getHealedMana() == 500) {
                         player.setMana(player.getMaxMana());
                         player.getPlayerInventory().remove(item);
                         System.out.println(itemName + " has been used.");
                         System.out.println("You have been healed to full mana.");
-                    } else {
+                    }
+                    else {
                         int healedHealth = consumable.getHealedHealth();
                         int healedMana = consumable.getHealedMana();
                         // Remove item from inventory
@@ -525,8 +522,8 @@
                     player.getPlayerInventory().remove(item);
                     System.out.println(itemName + " has been used.");
                     // Deal damage to the monster
-                    monster.setHealth(monster.getHealth() - damageDealt);
-                    monster.setDexterity(monster.getDexterity() - dexReduction);
+                    monster.setHealth(monster.getHealth()-damageDealt);
+                    monster.setDexterity(monster.getDexterity()-dexReduction);
                     System.out.println("You dealt " + damageDealt + " damage to the monster.");
                     System.out.println("You dealt " + dexReduction + " dexterity to the monster.");
                     return;
@@ -541,16 +538,16 @@
 
     // Method to display player stats
     //Kenny Amador
-    public void displayStats() {
+    public void displayStats(){
         System.out.println("~~~~~~~~~~");
-        System.out.println("Health: " + mainCharacter.getHealth() / mainCharacter.getMaxHealth());
+        System.out.println("Health: " + mainCharacter.getHealth() + "/" +  mainCharacter.getMaxHealth());
         System.out.println("Magic: " + mainCharacter.getMagic());
         System.out.println("Dexterity: " + mainCharacter.getDexterity());
         System.out.println("Speed: " + mainCharacter.getSpeed());
-        System.out.println("Mana: " + mainCharacter.getMana() / mainCharacter.getMaxMana());
+        System.out.println("Mana: " + mainCharacter.getMana() + "/" + mainCharacter.getMaxMana());
         System.out.println("Defense: " + mainCharacter.getDefense());
         System.out.println("Coins: " + mainCharacter.getPlayerCoins());
-        System.out.println("Experience: " + mainCharacter.getPlayerExp() / mainCharacter.getPlayerMaxExp());
+        System.out.println("Experience: " + mainCharacter.getPlayerExp() + "/" + mainCharacter.getPlayerMaxExp());
         System.out.println("~~~~~~~~~~");
     }
 
@@ -575,7 +572,7 @@
                         mainCharacter.setPlayerCoins(mainCharacter.getPlayerCoins() + monster.getGoldDrop());
                         System.out.println("You have gained " + monster.getGoldDrop() + " coins.");
                         System.out.println("~~~~~~~~~~");
-                        mainCharacter.levelUp(listOfSpells);
+                        mainCharacter.levelUp();
                         mainCharacter.setInBattle(false);
                         break;
                     } else {
@@ -590,15 +587,13 @@
                             consume(itemToConsume, mainCharacter);
                         } else if (action.equalsIgnoreCase("escape")) {
                             mainCharacter.escape(currentRoom, mainCharacter.getInBattle());
-                        } else if (action.equalsIgnoreCase("throw")) {
+                        }
+                        else if (action.equalsIgnoreCase("throw")) {
                             System.out.println("Which item would you like to throw?");
                             String itemToThrow = scanner.nextLine();
                             throwItem(itemToThrow, monster, mainCharacter);
-                        } else if (action.equalsIgnoreCase("spells")) {
-                            System.out.println("Which spell will you like to case");
-                            String spells = scanner.nextLine();
-                            activateSpells(spells, monster, mainCharacter);
-                        } else {
+                        }
+                        else {
                             System.out.println("You can't do that in battle. Please try again.");
                         }
                     }
@@ -609,7 +604,7 @@
 
     // Method for the player to deal damage to a monster
     public void dealDamage(Monster monster) {
-        mainCharacter.setHitRate((4 * mainCharacter.getDexterity() + mainCharacter.getBaseHitRate()) - monster.getAvoidRate());
+        mainCharacter.setHitRate((4*mainCharacter.getDexterity()+mainCharacter.getBaseHitRate())-monster.getAvoidRate());
         if (mainCharacter.getHitRate() > 50) {
             monster.setHealth(monster.getHealth() - mainCharacter.getMagic());
             System.out.println("You dealt " + mainCharacter.getMagic() + " damage to the monster.");
@@ -620,7 +615,7 @@
 
     //Method for the monster to deal damage to the player
     public void dealDamage2(Monster monster) {
-        monster.setHitRate((4 * monster.getDexterity()) - mainCharacter.getAvoidRate());
+        monster.setHitRate((4*monster.getDexterity())-mainCharacter.getAvoidRate());
         if (monster.getHitRate() > 50) {
             mainCharacter.setHealth(mainCharacter.getHealth() - monster.getAttack());
             System.out.println("The monster dealt " + monster.getAttack() + " damage to you.");
@@ -631,7 +626,7 @@
 
 
     //help command
-    public void helpCommand() {
+    public void helpCommand(){
         System.out.println("(north,east,south,west)--move around");
         System.out.println("(look)--examine the room");
         System.out.println("(inspect)--inspect an item");
@@ -647,73 +642,4 @@
         System.out.println("(teleport)--teleport to a room");
     }
 
-
-    public void eyeOfTruth(Rooms currentRoom) {
-        if (!currentRoom.getPuzzleIncluded().contains("N/A")) {
-            System.out.println(listOfPuzzles.get(listOfRooms.indexOf(currentRoom)).getHint());
-        } else {
-            System.out.println("There are no puzzles in this room");
-        }
-    }
-
-    public void activateSpells(String spellName, Monster monster, Player mainCharacter) {
-        if (spellName.equalsIgnoreCase("Ray of fire")) {
-            for (Spells spell : listOfSpells) {
-                if (mainCharacter.getPlayerLevel() >= spell.getLevelNeeded() & spell.getName().equalsIgnoreCase(spellName)) {
-                    monster.setHealth(monster.getHealth() - spell.getEffects());
-                    mainCharacter.setMana(mainCharacter.getMana() - spell.getManaCost());
-                }
-            }
-        }//end if
-        if(spellName.equalsIgnoreCase("Flame Shield")){
-            for (Spells spell : listOfSpells) {
-                if (mainCharacter.getPlayerLevel() >= spell.getLevelNeeded() & spell.getName().equalsIgnoreCase(spellName)) {
-                    mainCharacter.setDefense(mainCharacter.getDefense() + spell.getEffects());
-                    mainCharacter.setMana(mainCharacter.getMana() - spell.getManaCost());
-                }
-            }
-        }//end if
-
-        if(spellName.equalsIgnoreCase("Heat Wave")){
-            for (Spells spell : listOfSpells) {
-                if (mainCharacter.getPlayerLevel() >= spell.getLevelNeeded() & spell.getName().equalsIgnoreCase(spellName)) {
-                    mainCharacter.setDefense(mainCharacter.getDefense() + spell.getEffects());
-                    mainCharacter.setDefense(mainCharacter.getDefense() - spell.getEffects());
-                    mainCharacter.setMana(mainCharacter.getMana() - spell.getManaCost());
-                }
-            }
-        }
-        if(spellName.equalsIgnoreCase("Meteor Storm")){
-            Random random = new Random();
-            int meteors = random.nextInt();
-            for (Spells spell : listOfSpells) {
-                if (mainCharacter.getPlayerLevel() >= spell.getLevelNeeded() & spell.getName().equalsIgnoreCase(spellName)) {
-                    mainCharacter.setHealth(mainCharacter.getMaxHealth() - (meteors * spell.getEffects()));
-                    mainCharacter.setMana(mainCharacter.getMana() - spell.getManaCost());
-                }
-            }
-        }
-        if(spellName.equalsIgnoreCase("flame master")){
-            for (Spells spell : listOfSpells) {
-                if (mainCharacter.getPlayerLevel() >= spell.getLevelNeeded() & spell.getName().equalsIgnoreCase(spellName)) {
-                    mainCharacter.setHealth(mainCharacter.getHealth() + spell.getEffects());
-                    mainCharacter.setDefense(mainCharacter.getDefense() + spell.getEffects());
-                    mainCharacter.setMana(mainCharacter.getMana() - spell.getManaCost());
-                }
-            }
-        }
-
-        if(spellName.equalsIgnoreCase("Ice Shield")) {
-            for (Spells spell : listOfSpells) {
-                if (mainCharacter.getPlayerLevel() >= spell.getLevelNeeded() & spell.getName().equalsIgnoreCase(spellName)) {
-                    mainCharacter.setDefense(mainCharacter.getDefense() + spell.getEffects());
-                    mainCharacter.setMana(mainCharacter.getMana() - spell.getManaCost());
-                }
-            }
-        }
-        else{
-            System.out.println("You cannot use this spell");
-        }
-    }
-
 }//end Game
\ No newline at end of file
Index: src/Spells.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>NC001-Ray of Poison-This will deal damage and has a chance of poisoning the enemy.\r\nNC002-Raise of dead-Defeated monsters can now be brought back to life as an ally, but in the form of a skeleton or a zombie. Up to 6 undead can be controlled at once. This ability can only be usedoutside of battle.\r\nNC003-Merge the Dead-Outside of battle, you can merge 4 undead creatures under your control into a more powerful undead creature.\r\nNC004-Loyal Servants-Your undead creatures will always take the damage for you, shielding you from any attacks.\r\nNC005-Master of the Dead-You can now cast \"Raise the dead\" during a battle due to your experience as a necromancer.\r\nFC001-Ray of Fire-This will definitely scorch monsters in your path during combat.\r\nFC002-Flame Shield-You cast an aura of fire around you. Now whenever an enemy attacks you, they'll take damage in return.\r\nFC003- Heat Wave-You begin to create heat waves while raising the temperature of the area. Your enemy's defense is lowered while your defense is raised.\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Spells.txt b/src/Spells.txt
--- a/src/Spells.txt	(revision 5fe09e11dbe727b0f3527ed388757f2d072987e0)
+++ b/src/Spells.txt	(date 1713659225356)
@@ -1,8 +1,8 @@
-NC001-Ray of Poison-This will deal damage and has a chance of poisoning the enemy.
-NC002-Raise of dead-Defeated monsters can now be brought back to life as an ally, but in the form of a skeleton or a zombie. Up to 6 undead can be controlled at once. This ability can only be usedoutside of battle.
-NC003-Merge the Dead-Outside of battle, you can merge 4 undead creatures under your control into a more powerful undead creature.
-NC004-Loyal Servants-Your undead creatures will always take the damage for you, shielding you from any attacks.
-NC005-Master of the Dead-You can now cast "Raise the dead" during a battle due to your experience as a necromancer.
-FC001-Ray of Fire-This will definitely scorch monsters in your path during combat.
-FC002-Flame Shield-You cast an aura of fire around you. Now whenever an enemy attacks you, they'll take damage in return.
-FC003- Heat Wave-You begin to create heat waves while raising the temperature of the area. Your enemy's defense is lowered while your defense is raised.
+Ray of Fire-This will scorch monsters in your path during combat-1-12-4
+Flame Shield-You cast an aura of fire around you that protects you-2-10-8
+Heat Wave-You begin to create heat waves while raising the temperature of the area. Your enemy's defense is lowered.-3-15-12
+Meteor Storm-You cast a meteor storm that hurls meteors on your enemy-4-15-20
+Flame Master-This spell increases your hp and automatically casts flame shield-5-10-0
+Ice Castle-Using magic, you create a fortress out of ice protecting you from incoming damage.-0-5-0
+Eye of Truth-This spell will give you valuable insight whenever you feel stuck.-0-0-0
+Channel Energy-This restores magic in the middle of a fight-0-12-0
\ No newline at end of file
Index: src/Player.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.io.File;\r\nimport java.util.ArrayList;\r\nimport java.util.Scanner;\r\n\r\n/**Class: Player\r\n * @author Team Avengers / Lincoln Bruce\r\n * @version 1.0\r\n * Course: ITEC 3860 Spring 2024\r\n * Written: Apr 9, 2024\r\n * This class represents a player entity within a game. Each player object encapsulates information\r\n */\r\n\r\npublic class Player {\r\n\r\n    //Player attributes\r\n    //Lincoln Bruce\r\n    private int health;\r\n    private int maxHealth;\r\n    private int magic;\r\n    private int dexterity;\r\n    private int speed;\r\n    private int maxMana;\r\n    private int mana;\r\n    private int defense;\r\n    private int playerCoins;\r\n    private Rooms currentRoom;\r\n    private ArrayList<Item> playerInventory;\r\n    private ArrayList<Spells> playerSpells;\r\n    private Equipable equippedItem;\r\n    private int baseHitRate;\r\n    private int hitRate;\r\n    private int AvoidRate;\r\n    private boolean inBattle;\r\n    private int playerLevel;\r\n    private int playerExp;\r\n    private int playerMaxExp;\r\n    private String name;\r\n    private String description;\r\n    private int effects;\r\n    private int manaCost;\r\n\r\n    public Player(int health, int magic, int dexterity, int speed, int mana, int defense,Rooms currentRoom) {\r\n        this.health = health;\r\n        this.maxHealth = health;\r\n        this.magic = magic;\r\n        this.dexterity = dexterity;\r\n        this.speed = speed;\r\n        this.mana = mana;\r\n        this.maxMana = mana;\r\n        this.defense = defense;\r\n        this.playerCoins = 0;\r\n        this.currentRoom = currentRoom;\r\n        this.playerInventory = new ArrayList<>();\r\n        this.playerSpells = new ArrayList<>();\r\n        this.equippedItem = null;\r\n        this.baseHitRate = 80;\r\n        this.hitRate = 0;\r\n        this.AvoidRate = 4 * speed;\r\n        this.inBattle = false;\r\n        this.playerLevel = 1;\r\n        this.playerExp = 0;\r\n        this.playerMaxExp = 100;\r\n    }\r\n\r\n    //Getters and Setters\r\n    //Lincoln Bruce\r\n    public int getHealth() {\r\n        return health;\r\n    }\r\n\r\n    public void setHealth(int health) {\r\n        this.health = health;\r\n    }\r\n\r\n    public int getMaxHealth() {\r\n        return maxHealth;\r\n    }\r\n\r\n    public void setMaxHealth(int maxHealth) {\r\n        this.maxHealth = maxHealth;\r\n    }\r\n\r\n    public int getMagic() {\r\n        return magic;\r\n    }\r\n\r\n    public void setMagic(int magic) {\r\n        this.magic = magic;\r\n    }\r\n\r\n    public int getDexterity() {\r\n        return dexterity;\r\n    }\r\n\r\n    public void setDexterity(int dexterity) {\r\n        this.dexterity = dexterity;\r\n    }\r\n\r\n    public int getSpeed() {\r\n        return speed;\r\n    }\r\n\r\n    public void setSpeed(int speed) {\r\n        this.speed = speed;\r\n    }\r\n\r\n    public int getMana() {\r\n        return mana;\r\n    }\r\n\r\n    public void setMana(int mana) {\r\n        this.mana = mana;\r\n    }\r\n\r\n    public int getMaxMana() {\r\n        return maxMana;\r\n    }\r\n\r\n    public void setMaxMana(int maxMana) {\r\n        this.maxMana = maxMana;\r\n    }\r\n\r\n    public int getDefense() {\r\n        return defense;\r\n    }\r\n\r\n    public void setDefense(int defense) {\r\n        this.defense = defense;\r\n    }\r\n\r\n    public int getPlayerCoins() {\r\n        return playerCoins;\r\n    }\r\n\r\n    public void setPlayerCoins(int playerCoins) {\r\n        this.playerCoins = playerCoins;\r\n    }\r\n\r\n    public Rooms getCurrentRoom() {\r\n        return currentRoom;\r\n    }\r\n\r\n    public void setCurrentRoom(Rooms currentRoom) {\r\n        this.currentRoom = currentRoom;\r\n    }\r\n\r\n    public ArrayList<Item> getPlayerInventory() {\r\n        return playerInventory;\r\n    }\r\n\r\n    public void setPlayerInventory(ArrayList<Item> playerInventory) {\r\n\r\n        this.playerInventory = playerInventory;\r\n    }\r\n\r\n    public ArrayList<Spells> getPlayerSpells() {\r\n        return playerSpells;\r\n    }\r\n\r\n    public void setPlayerSpells(ArrayList<Spells> playerSpells) {\r\n        this.playerSpells = playerSpells;\r\n    }\r\n\r\n    public Equipable getEquippedItem() {\r\n        return equippedItem;\r\n    }\r\n\r\n    public void setEquippedItem(Equipable equippedItem) {\r\n        this.equippedItem = equippedItem;\r\n    }\r\n\r\n    public int getHitRate() {\r\n        return hitRate;\r\n    }\r\n\r\n    public void setHitRate(int hitRate) {\r\n        this.hitRate = hitRate;\r\n    }\r\n\r\n    public int getAvoidRate() {\r\n        return AvoidRate;\r\n    }\r\n\r\n    public void setAvoidRate(int AvoidRate) {\r\n        this.AvoidRate = AvoidRate;\r\n    }\r\n\r\n    public boolean getInBattle() {\r\n        return inBattle;\r\n    }\r\n\r\n    public void setInBattle(boolean inBattle) {\r\n        this.inBattle = inBattle;\r\n    }\r\n\r\n    public int getBaseHitRate() {\r\n        return baseHitRate;\r\n    }\r\n\r\n    public void setBaseHitRate(int baseHitRate) {\r\n        this.baseHitRate = baseHitRate;\r\n    }\r\n\r\n    public int getPlayerLevel() {\r\n        return playerLevel;\r\n    }\r\n\r\n    public void setPlayerLevel(int playerLevel) {\r\n        this.playerLevel = playerLevel;\r\n    }\r\n\r\n    public int getPlayerExp() {\r\n        return playerExp;\r\n    }\r\n\r\n    public void setPlayerExp(int playerExp) {\r\n        this.playerExp = playerExp;\r\n    }\r\n\r\n    public int getPlayerMaxExp() {\r\n        return playerMaxExp;\r\n    }\r\n\r\n    public void setPlayerMaxExp(int playerMaxExp) {\r\n        this.playerMaxExp = playerMaxExp;\r\n    }\r\n    public String getName() {\r\n        return name;\r\n    }\r\n    public int getEffects(){return effects;}\r\n    public int getManaCost(){return manaCost;}\r\n\r\n    public void setManaCost(int manaCost){this.manaCost = manaCost;}\r\n    public void setEffects(int effects){this.effects = effects;}\r\n    public void setName(String name) {\r\n        this.name = name;\r\n    }\r\n    public String getDescription() {\r\n        return description;\r\n    }\r\n    public void setDescription(String description) {\r\n        this.description = description;\r\n    }\r\n\r\n    //Method to display the player inventory\r\n    //Thuy Vy\r\n    public void inventory() {\r\n        if (getPlayerInventory().isEmpty()) {\r\n            System.out.println(\"You didn't pick up any items yet.\");\r\n        } else {\r\n            System.out.println(\"Inventory:\");\r\n            for (Item item : getPlayerInventory()) {\r\n                System.out.println(\"- \" + item.getItemName());\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    // method to escape from the battle\r\n    // Ginette Wilson\r\n    public void escape(Rooms previousRoom, boolean inBattle) {\r\n        if (inBattle) {\r\n            System.out.println(\"You escaped from the battle!\");\r\n            setInBattle(false);\r\n            // Set the current room to the previous room\r\n            this.setCurrentRoom(previousRoom);\r\n            // Set the previous room as visited since the player returns to it\r\n            previousRoom.setHasBeenVisited(true);\r\n        } else {\r\n            System.out.println(\"You cannot escape because you are not in battle!\");\r\n        }\r\n    }\r\n\r\n    // Huyen Pham &  Ginette Wilson\r\n    public void equipItem(String itemName) {\r\n        boolean itemFound = false;\r\n        for (Item item : playerInventory) {\r\n            if (item.getItemName().equalsIgnoreCase(itemName)) {\r\n                itemFound = true;\r\n                if (item instanceof Equipable) {\r\n                    if (equippedItem != null) {\r\n                        unequipItem(); // Unequip current item before equipping a new one\r\n                    }\r\n                    equippedItem = (Equipable) item;\r\n                    applyStats(equippedItem);\r\n                    System.out.println(\"Equipped: \" + itemName);\r\n                    return;\r\n                } else {\r\n                    System.out.println(itemName + \" is not an equipable item.\");\r\n                }\r\n            }\r\n        }\r\n        if (!itemFound) {\r\n            System.out.println(itemName + \" not found in inventory.\");\r\n        }\r\n    }\r\n\r\n\r\n    // Method to unequip the current item and revert stat changes\r\n    // Huyen Pham\r\n    public void unequipItem() {\r\n        if (equippedItem != null) {\r\n            revertStats(equippedItem);\r\n            System.out.println(\"Unequipped: \" + equippedItem.getItemName());\r\n            equippedItem = null;\r\n        } else {\r\n            System.out.println(\"No item is currently equipped.\");\r\n        }\r\n    }\r\n\r\n    // Apply stats from an equipable item\r\n// Huyen Pham\r\n    private void applyStats(Equipable item) {\r\n        // Update player stats based on the equipable item's properties\r\n        this.maxHealth += item.getAddedHealth();\r\n        this.magic += item.getAddedMagic(); // Assuming magic is a player stat\r\n        this.dexterity += item.getAddedDexterity();\r\n        this.speed += item.getAddedSpeed();\r\n        this.defense += item.getAddedDefense();\r\n    }\r\n\r\n    // Revert stats from an unequipped item\r\n//Huyen Pham\r\n    private void revertStats(Equipable item) {\r\n        // Revert player stats when an item is unequipped\r\n        this.maxHealth -= item.getAddedHealth();\r\n        this.magic -= item.getAddedMagic();\r\n        this.dexterity -= item.getAddedDexterity();\r\n        this.speed -= item.getAddedSpeed();\r\n        this.defense -= item.getAddedDefense();\r\n    }\r\n\r\n    //Method to level up the player\r\n    public void levelUp(ArrayList<Spells> spells) {\r\n        if (playerExp >= playerMaxExp && playerLevel < 5) {\r\n            if (playerLevel == 1 && playerExp >= 100) {\r\n                playerLevel = 2;\r\n                playerExp = playerExp - playerMaxExp;\r\n                playerMaxExp = 300;\r\n                setMaxHealth(getMaxHealth() + 15);\r\n                setHealth(getMaxHealth());\r\n                setMaxMana(getMaxMana() + 8);\r\n                setMana(getMaxMana());\r\n                setMagic(getMagic() + 5);\r\n                setSpeed(getSpeed() + 3);\r\n                setDexterity(getDexterity() + 8);\r\n                setDefense(getDefense() + 3);\r\n                playerSpells.add(spells.get(1));\r\n                System.out.println(\"You leveled up to level 2!\");\r\n            } else if (playerLevel == 2 && playerExp >= 300) {\r\n                playerLevel = 3;\r\n                playerExp = playerExp - playerMaxExp;\r\n                playerMaxExp = 600;\r\n                setMaxHealth(getMaxHealth() + 25);\r\n                setHealth(getMaxHealth());\r\n                setMaxMana(getMaxMana() + 8);\r\n                setMana(getMaxMana());\r\n                setMagic(getMagic() + 5);\r\n                setSpeed(getSpeed() + 3);\r\n                setDexterity(getDexterity() + 5);\r\n                setDefense(getDefense() + 3);\r\n                playerSpells.add(spells.get(2));\r\n                System.out.println(\"You leveled up to level 3!\");\r\n            } else if (playerLevel == 3 && playerExp >= 600) {\r\n                playerLevel = 4;\r\n                playerExp = playerExp - playerMaxExp;\r\n                playerMaxExp = 1000;\r\n                setMaxHealth(getMaxHealth() + 15);\r\n                setHealth(getMaxHealth());\r\n                setMaxMana(getMaxMana() + 8);\r\n                setMana(getMaxMana());\r\n                setMagic(getMagic() + 5);\r\n                setSpeed(getSpeed() + 3);\r\n                setDexterity(getDexterity() + 5);\r\n                setDefense(getDefense() + 3);\r\n                playerSpells.add(spells.get(3));\r\n                System.out.println(\"You leveled up to level 4!\");\r\n            } else if (playerLevel == 4 && playerExp >= 1000) {\r\n                playerLevel = 5;\r\n                setMaxHealth(getMaxHealth() + 30);\r\n                setHealth(getMaxHealth());\r\n                setMaxMana(getMaxMana() + 16);\r\n                setMana(getMaxMana());\r\n                setMagic(getMagic() + 5);\r\n                setSpeed(getSpeed() + 4);\r\n                setDexterity(getDexterity() + 5);\r\n                setDefense(getDefense() + 3);\r\n                playerSpells.add(spells.get(4));\r\n                System.out.println(\"You leveled up to level 5!\");\r\n                System.out.println(\"You have reached the maximum level!\");\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n    //Method to solve the puzzle\r\n    // Thuy Vy Pham\r\n    public void solvePuzzle(String solution, ArrayList<Item> playerInventory, ArrayList<Item> listOfItems, Rooms currentRoom, ArrayList<Puzzle> roomPuzzle) {\r\n        if (currentRoom.getRoomPuzzle() != null) {\r\n            String itemToUse = \"\";\r\n            for (Item item : playerInventory) {\r\n                if (item.getItemName().equalsIgnoreCase(currentRoom.getRoomPuzzle().get(0).getItemSolution())) {\r\n                    itemToUse = item.getItemName();\r\n                }\r\n            }\r\n            while (!currentRoom.getRoomPuzzle().get(0).isSolved()) {\r\n                if (solution.equalsIgnoreCase(currentRoom.getRoomPuzzle().get(0).getSolution())) {\r\n                    System.out.println(currentRoom.getRoomPuzzle().get(0).getSolvedMessage());\r\n                    rewardPlayer(currentRoom, listOfItems, roomPuzzle);\r\n                    currentRoom.getRoomPuzzle().get(0).setSolved(true);\r\n                    currentRoom.setRoomPuzzle(null);\r\n                    break;\r\n                } else if (solution.equalsIgnoreCase(itemToUse)) {\r\n                    System.out.println(currentRoom.getRoomPuzzle().get(0).getSolvedMessage());\r\n                    rewardPlayer(currentRoom, listOfItems, roomPuzzle);\r\n                    currentRoom.getRoomPuzzle().get(0).setSolved(true);\r\n                    currentRoom.setRoomPuzzle(null);\r\n                    break;\r\n                } else if (solution.equalsIgnoreCase(\"eot\") || solution.equalsIgnoreCase(\"Eye of Truth\")) {\r\n                    System.out.println(currentRoom.getRoomPuzzle().get(0).getHint());\r\n                    Scanner scanner = new Scanner(System.in);\r\n                    String action = scanner.nextLine();\r\n                    solvePuzzle(action, playerInventory, listOfItems, currentRoom, roomPuzzle);\r\n                } else if (currentRoom.getRoomPuzzle().get(0).getAttemptsLeft() == 1) {\r\n                    System.out.println(currentRoom.getRoomPuzzle().get(0).getFailMessage());\r\n                    malusPlayer(currentRoom, roomPuzzle);\r\n                    currentRoom.getRoomPuzzle().get(0).setSolved(true);\r\n                    break;\r\n                } else {\r\n                    currentRoom.getRoomPuzzle().get(0).setAttemptsLeft(currentRoom.getRoomPuzzle().get(0).getAttemptsLeft() - 1);\r\n                    System.out.println(\" Try again! You have: \" + currentRoom.getRoomPuzzle().get(0).getAttemptsLeft() + \" attempts left.\");\r\n                    Scanner scanner = new Scanner(System.in);\r\n                    String action = scanner.nextLine();\r\n                    solvePuzzle(action, playerInventory, listOfItems, currentRoom, roomPuzzle);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            System.out.println(\"There is no puzzle in this room.\");\r\n        }\r\n    }\r\n\r\n    //Method to reward the player after a puzzle\r\n    // Thuy Vy Pham\r\n    public void rewardPlayer(Rooms currentRoom, ArrayList<Item> listOfItems, ArrayList<Puzzle> roomPuzzle) {\r\n        if (currentRoom.getRoomPuzzle().get(0).getItemReward() != null) {\r\n            System.out.println(\"You have received a \" + currentRoom.getRoomPuzzle().get(0).getItemReward() + \"!\");\r\n            for (Item item : listOfItems) {\r\n                if (item.getItemName().equalsIgnoreCase(currentRoom.getRoomPuzzle().get(0).getItemReward())) {\r\n                    playerInventory.add(item);\r\n                }\r\n            }\r\n        }\r\n        if (currentRoom.getRoomPuzzle().get(0).getCoinsReward() != 0) {\r\n            System.out.println(\"You have received \" + currentRoom.getRoomPuzzle().get(0).getCoinsReward() + \" coins!\");\r\n            setPlayerCoins(getPlayerCoins() + currentRoom.getRoomPuzzle().get(0).getCoinsReward());\r\n        }\r\n        if (currentRoom.getRoomPuzzle().get(0).getMagicReward() != 0) {\r\n            System.out.println(\"You have received \" + currentRoom.getRoomPuzzle().get(0).getMagicReward() + \" magic points!\");\r\n            setMagic(getMagic() + currentRoom.getRoomPuzzle().get(0).getMagicReward());\r\n        }\r\n    }\r\n\r\n    //Method to malus the player after a puzzle\r\n    // Thuy Vy Pham\r\n    public void malusPlayer(Rooms currentRoom, ArrayList<Puzzle> roomPuzzle) {\r\n        if (currentRoom.getRoomPuzzle().get(0).getDamageTaken() != 0) {\r\n            System.out.println(\"You have taken \" + currentRoom.getRoomPuzzle().get(0).getDamageTaken() + \" damage!\");\r\n            setHealth(getHealth() - currentRoom.getRoomPuzzle().get(0).getDamageTaken());\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Player.java b/src/Player.java
--- a/src/Player.java	(revision 5fe09e11dbe727b0f3527ed388757f2d072987e0)
+++ b/src/Player.java	(date 1713662400845)
@@ -1,4 +1,3 @@
-import java.io.File;
 import java.util.ArrayList;
 import java.util.Scanner;
 
@@ -331,7 +330,7 @@
     }
 
     //Method to level up the player
-    public void levelUp(ArrayList<Spells> spells) {
+    public void levelUp() {
         if (playerExp >= playerMaxExp && playerLevel < 5) {
             if (playerLevel == 1 && playerExp >= 100) {
                 playerLevel = 2;
@@ -345,7 +344,6 @@
                 setSpeed(getSpeed() + 3);
                 setDexterity(getDexterity() + 8);
                 setDefense(getDefense() + 3);
-                playerSpells.add(spells.get(1));
                 System.out.println("You leveled up to level 2!");
             } else if (playerLevel == 2 && playerExp >= 300) {
                 playerLevel = 3;
@@ -359,7 +357,6 @@
                 setSpeed(getSpeed() + 3);
                 setDexterity(getDexterity() + 5);
                 setDefense(getDefense() + 3);
-                playerSpells.add(spells.get(2));
                 System.out.println("You leveled up to level 3!");
             } else if (playerLevel == 3 && playerExp >= 600) {
                 playerLevel = 4;
@@ -373,7 +370,6 @@
                 setSpeed(getSpeed() + 3);
                 setDexterity(getDexterity() + 5);
                 setDefense(getDefense() + 3);
-                playerSpells.add(spells.get(3));
                 System.out.println("You leveled up to level 4!");
             } else if (playerLevel == 4 && playerExp >= 1000) {
                 playerLevel = 5;
@@ -385,7 +381,6 @@
                 setSpeed(getSpeed() + 4);
                 setDexterity(getDexterity() + 5);
                 setDefense(getDefense() + 3);
-                playerSpells.add(spells.get(4));
                 System.out.println("You leveled up to level 5!");
                 System.out.println("You have reached the maximum level!");
             }
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_22\" default=\"true\" project-jdk-name=\"openjdk-22 (2)\" project-jdk-type=\"JavaSDK\">\r\n    <output url=\"file://$PROJECT_DIR$/out\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision 5fe09e11dbe727b0f3527ed388757f2d072987e0)
+++ b/.idea/misc.xml	(date 1713662234000)
@@ -1,6 +1,6 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
-  <component name="ProjectRootManager" version="2" languageLevel="JDK_22" default="true" project-jdk-name="openjdk-22 (2)" project-jdk-type="JavaSDK">
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_X" default="true" project-jdk-name="openjdk-22 (2)" project-jdk-type="JavaSDK">
     <output url="file://$PROJECT_DIR$/out" />
   </component>
 </project>
\ No newline at end of file
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"e5df700f-7446-4147-a3d8-5f63a9c4a9fc\" name=\"Changes\" comment=\"Add displayPuzzle() to Game class by Thuy Vy\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/misc.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/misc.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_4_18_2024_7_03_PM__Changes_.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_4_18_2024_7_03_PM__Changes_.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_4_19_2024_7_40_PM__Changes_.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_4_19_2024_7_40_PM__Changes_.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_4_19_2024_9_30_PM__Changes_.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_4_19_2024_9_30_PM__Changes_.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_4_20_2024_2_53_PM__Changes_.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_4_20_2024_2_53_PM__Changes_.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_4_20_2024_2_53_PM__Changes_1.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_4_20_2024_2_53_PM__Changes_1.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_4_20_2024_2_54_PM__Changes_.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_4_20_2024_2_54_PM__Changes_.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_4_20_2024_6_35_PM__Changes_.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_4_20_2024_6_35_PM__Changes_.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_4_20_2024_6_35_PM__Changes_1.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_4_20_2024_6_35_PM__Changes_1.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_4_20_2024_8_36_PM__Changes_.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_4_20_2024_8_36_PM__Changes_.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_4_20_2024_8_36_PM__Changes_1.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_4_20_2024_8_36_PM__Changes_1.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_4_20_2024_8_59_PM__Changes_.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_4_20_2024_8_59_PM__Changes_.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/out/production/TeamAvengers-Spring2024/Game.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/out/production/TeamAvengers-Spring2024/Game.class\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/out/production/TeamAvengers-Spring2024/Player.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/out/production/TeamAvengers-Spring2024/Player.class\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/out/production/TeamAvengers-Spring2024/Spells.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/out/production/TeamAvengers-Spring2024/Spells.class\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/out/production/TeamAvengers-Spring2024/Spells.txt\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/out/production/TeamAvengers-Spring2024/Spells.txt\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/Player.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/Player.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/Spells.txt\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/Spells.txt\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"GitHubPullRequestSearchHistory\">{\r\n  &quot;lastFilter&quot;: {\r\n    &quot;state&quot;: &quot;OPEN&quot;,\r\n    &quot;assignee&quot;: &quot;abruce4&quot;\r\n  }\r\n}</component>\r\n  <component name=\"GithubPullRequestsUISettings\">{\r\n  &quot;selectedUrlAndAccountId&quot;: {\r\n    &quot;url&quot;: &quot;https://github.com/abruce4/TeamAvengers-Spring2024.git&quot;,\r\n    &quot;accountId&quot;: &quot;7733526f-2f90-4f29-82ac-297ac51ad1aa&quot;\r\n  }\r\n}</component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 2\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2dtBpXZNAPK9cS6MQMxuRKXdxd3\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\">\r\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\r\n  </component>\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;Application.Game.executor&quot;: &quot;Run&quot;,\r\n    &quot;Application.main.executor&quot;: &quot;Run&quot;,\r\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,\r\n    &quot;git-widget-placeholder&quot;: &quot;master&quot;,\r\n    &quot;ignore.virus.scanning.warn.message&quot;: &quot;true&quot;,\r\n    &quot;kotlin-language-version-configured&quot;: &quot;true&quot;,\r\n    &quot;last_opened_file_path&quot;: &quot;C:/Users/linco/IdeaProjects/Individial Assignment&quot;,\r\n    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,\r\n    &quot;settings.editor.selected.configurable&quot;: &quot;project.propVCSSupport.DirectoryMappings&quot;,\r\n    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;\r\n  }\r\n}</component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\linco\\OneDrive\\Desktop\\TeamAvengers-Spring2024\\src\" />\r\n      <recent name=\"C:\\Users\\linco\\OneDrive\\Desktop\\TeamAvengers-Spring2024\\src\\Puzzles\" />\r\n      <recent name=\"C:\\Users\\linco\\OneDrive\\Desktop\\TeamAvengers-Spring2024\\src\\Monsters\" />\r\n      <recent name=\"C:\\Users\\linco\\OneDrive\\Desktop\\TeamAvengers-Spring2024\\src\\Items\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\">\r\n    <configuration name=\"main\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"main\" />\r\n      <module name=\"TeamAvengers-Spring2024\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Application.main\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SharedIndexes\">\r\n    <attachedChunks>\r\n      <set>\r\n        <option value=\"jdk-22-openjdk-22-3183f394aec4-bad0321e\" />\r\n      </set>\r\n    </attachedChunks>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"SvnConfiguration\">\r\n    <configuration />\r\n  </component>\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"e5df700f-7446-4147-a3d8-5f63a9c4a9fc\" name=\"Changes\" comment=\"Print my name to the console Lincoln Bruce\" />\r\n      <created>1710817678022</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1710817678022</updated>\r\n      <workItem from=\"1710817679173\" duration=\"788000\" />\r\n      <workItem from=\"1712681902239\" duration=\"12247000\" />\r\n      <workItem from=\"1712753941084\" duration=\"9200000\" />\r\n      <workItem from=\"1712849759235\" duration=\"925000\" />\r\n      <workItem from=\"1712852633706\" duration=\"2000\" />\r\n      <workItem from=\"1712861400756\" duration=\"60000\" />\r\n      <workItem from=\"1712970710953\" duration=\"28944000\" />\r\n      <workItem from=\"1713320904026\" duration=\"12213000\" />\r\n      <workItem from=\"1713333668176\" duration=\"19383000\" />\r\n      <workItem from=\"1713468430024\" duration=\"1771000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"Created the Monsters.txt and the Monster.java class with its attribute, constructors and the method to read from the file.(Lincoln Bruce)\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1712691368453</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1712691368453</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"Modified the Monster.java and Monsters.txt to add the room ID.(Lincoln Bruce)\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1712785910437</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1712785910437</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"Organized the classes and files into packages and added to the items package(Lincoln Bruce)\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1712986031488</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1712986031488</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"Organized the classes and files into packages and added to the items package(Lincoln Bruce)\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1712986320424</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1712986320424</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"Organized the classes and files into packages and added to the items package(Lincoln Bruce)\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1712986418461</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1712986418461</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00006\" summary=\"Organized the classes and files into packages and added to the items package(Lincoln Bruce)\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1712986505525</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1712986505525</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00007\" summary=\"Removed packages(Lincoln Bruce)\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1713024557954</created>\r\n      <option name=\"number\" value=\"00007\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1713024557954</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00008\" summary=\"Worked on the items inheritance(Lincoln Bruce)\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1713028710597</created>\r\n      <option name=\"number\" value=\"00008\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1713028710598</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00009\" summary=\"Worked on the items inheritance(Lincoln Bruce)\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1713050649012</created>\r\n      <option name=\"number\" value=\"00009\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1713050649012</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00010\" summary=\"Finished working on items for now, waiting to test(Lincoln Bruce)\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1713052494677</created>\r\n      <option name=\"number\" value=\"00010\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00010\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1713052494677</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00011\" summary=\"Edit Map class by Thuy Vy\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1713149512830</created>\r\n      <option name=\"number\" value=\"00011\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00011\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1713149512830</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00012\" summary=\"Create Spells.java class by Thuy Vy\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1713150718405</created>\r\n      <option name=\"number\" value=\"00012\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00012\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1713150718405</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00013\" summary=\"Add readSpells method by Thuy Vy\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1713151663291</created>\r\n      <option name=\"number\" value=\"00013\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00013\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1713151663291</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00014\" summary=\"Update Puzzle Class by Thuy Vy\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1713155214441</created>\r\n      <option name=\"number\" value=\"00014\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00014\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1713155214441</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00015\" summary=\"Monsters.txt update(Lincoln Bruce)\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1713188311212</created>\r\n      <option name=\"number\" value=\"00015\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00015\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1713188311212</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00016\" summary=\"Monsters.txt update(Lincoln Bruce)\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1713188957789</created>\r\n      <option name=\"number\" value=\"00016\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00016\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1713188957789</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00017\" summary=\"Changed ID to string update(Lincoln Bruce)\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1713201281833</created>\r\n      <option name=\"number\" value=\"00017\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00017\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1713201281833</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00018\" summary=\"Changed character method(Lincoln Bruce)\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1713201907866</created>\r\n      <option name=\"number\" value=\"00018\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00018\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1713201907866</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00019\" summary=\"Changed character method(Lincoln Bruce)\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1713203386663</created>\r\n      <option name=\"number\" value=\"00019\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00019\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1713203386663</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00020\" summary=\"Add getRoom() method by Thuy Vy\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1713245258689</created>\r\n      <option name=\"number\" value=\"00020\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00020\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1713245258689</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00021\" summary=\"Create Player class and pickup() method by Thuy Vy\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1713245317370</created>\r\n      <option name=\"number\" value=\"00021\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00021\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1713245317370</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00022\" summary=\"added the look command that for now will display the item IDs. Changed the navigation system to use if statements instead of switch case and renamed it to checkCommand.\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1713297229242</created>\r\n      <option name=\"number\" value=\"00022\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00022\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1713297229242</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00023\" summary=\"rearranged the roomParsing to make it less confusing.\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1713301801831</created>\r\n      <option name=\"number\" value=\"00023\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00023\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1713301801831</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00024\" summary=\"Chenged the map class to only create the map and put all parsing back into their respective classes (Lincoln Bruce)\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1713324126920</created>\r\n      <option name=\"number\" value=\"00024\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00024\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1713324126920</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00025\" summary=\"Changed the map class to only create the map and put all parsing back into their respective classes (Lincoln Bruce)\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1713325675792</created>\r\n      <option name=\"number\" value=\"00025\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00025\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1713325675792</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00026\" summary=\"rearanged most of the stuff for more clarification, will continue and explain tomorrow(Lincoln Bruce)\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1713334991794</created>\r\n      <option name=\"number\" value=\"00026\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00026\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1713334991794</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00027\" summary=\"rearanged most of the stuff for more clarification, will continue and explain tomorrow(Lincoln Bruce)\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1713335118564</created>\r\n      <option name=\"number\" value=\"00027\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00027\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1713335118564</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00028\" summary=\"Changed main back to run method(Lincoln Bruce)\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1713357003356</created>\r\n      <option name=\"number\" value=\"00028\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00028\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1713357003356</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00029\" summary=\"Changed main back to run method(Lincoln Bruce)\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1713357637873</created>\r\n      <option name=\"number\" value=\"00029\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00029\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1713357637873</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00030\" summary=\"Changed main back to run method(Lincoln Bruce)\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1713358009218</created>\r\n      <option name=\"number\" value=\"00030\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00030\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1713358009218</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00031\" summary=\"Changed main back to run method(Lincoln Bruce)\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1713370430799</created>\r\n      <option name=\"number\" value=\"00031\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00031\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1713370430799</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00032\" summary=\"Changed main back to run method(Lincoln Bruce)\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1713370447393</created>\r\n      <option name=\"number\" value=\"00032\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00032\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1713370447393</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00033\" summary=\"Changed main back to run method(Lincoln Bruce)\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1713374774418</created>\r\n      <option name=\"number\" value=\"00033\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00033\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1713374774418</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00034\" summary=\"Changed main back to run method(Lincoln Bruce)\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1713378830609</created>\r\n      <option name=\"number\" value=\"00034\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00034\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1713378830609</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00035\" summary=\"added display stats and moved mainCharacter to game constructor to simplify the runGame method\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1713395158569</created>\r\n      <option name=\"number\" value=\"00035\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00035\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1713395158569</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00036\" summary=\"Method to read levels from file by Thuy Vy\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1713480616562</created>\r\n      <option name=\"number\" value=\"00036\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00036\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1713480616562</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00037\" summary=\"Working on the player's levels by Thuy Vy\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1713481033150</created>\r\n      <option name=\"number\" value=\"00037\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00037\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1713481033150</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00038\" summary=\"Working on the player's levels by Thuy Vy\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1713482812919</created>\r\n      <option name=\"number\" value=\"00038\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00038\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1713482812920</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00039\" summary=\"Add inventory() in Game class by Thuy Vy\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1713487208490</created>\r\n      <option name=\"number\" value=\"00039\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00039\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1713487208490</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00040\" summary=\"Update Puzzle class by Thuy Vy\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1713500655867</created>\r\n      <option name=\"number\" value=\"00040\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00040\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1713500655867</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00041\" summary=\"fixed the attack method, will work on it and player level more today (Lincoln Bruce)\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1713552721543</created>\r\n      <option name=\"number\" value=\"00041\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00041\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1713552721543</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00042\" summary=\"Add displayPuzzle() to Game class by Thuy Vy\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1713659537594</created>\r\n      <option name=\"number\" value=\"00042\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00042\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1713659537594</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"43\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"Worked on the items inheritance(Lincoln Bruce)\" />\r\n    <MESSAGE value=\"Finished working on items for now, waiting to test(Lincoln Bruce)\" />\r\n    <MESSAGE value=\"Edit Map class by Thuy Vy\" />\r\n    <MESSAGE value=\"Create Spells.java class by Thuy Vy\" />\r\n    <MESSAGE value=\"Add readSpells method by Thuy Vy\" />\r\n    <MESSAGE value=\"Update Puzzle Class by Thuy Vy\" />\r\n    <MESSAGE value=\"Monsters.txt update(Lincoln Bruce)\" />\r\n    <MESSAGE value=\"Changed ID to string update(Lincoln Bruce)\" />\r\n    <MESSAGE value=\"Changed character method(Lincoln Bruce)\" />\r\n    <MESSAGE value=\"Add getRoom() method by Thuy Vy\" />\r\n    <MESSAGE value=\"Create Player class and pickup() method by Thuy Vy\" />\r\n    <MESSAGE value=\"added the look command that for now will display the item IDs. Changed the navigation system to use if statements instead of switch case and renamed it to checkCommand.\" />\r\n    <MESSAGE value=\"rearranged the roomParsing to make it less confusing.\" />\r\n    <MESSAGE value=\"Chenged the map class to only create the map and put all parsing back into their respective classes (Lincoln Bruce)\" />\r\n    <MESSAGE value=\"Changed the map class to only create the map and put all parsing back into their respective classes (Lincoln Bruce)\" />\r\n    <MESSAGE value=\"rearanged most of the stuff for more clarification, will continue and explain tomorrow(Lincoln Bruce)\" />\r\n    <MESSAGE value=\"Changed main back to run method(Lincoln Bruce)\" />\r\n    <MESSAGE value=\"added display stats and moved mainCharacter to game constructor to simplify the runGame method\" />\r\n    <MESSAGE value=\"Start working on the attack method (Lincoln Bruce)\" />\r\n    <MESSAGE value=\"Method to read levels from file by Thuy Vy\" />\r\n    <MESSAGE value=\"Working on the player's levels by Thuy Vy\" />\r\n    <MESSAGE value=\"Add inventory() in Game class by Thuy Vy\" />\r\n    <MESSAGE value=\"Update Puzzle class by Thuy Vy\" />\r\n    <MESSAGE value=\"fixed the attack method, will work on it and player level more today (Lincoln Bruce)\" />\r\n    <MESSAGE value=\"Add displayPuzzle() to Game class by Thuy Vy\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Add displayPuzzle() to Game class by Thuy Vy\" />\r\n  </component>\r\n  <component name=\"XSLT-Support.FileAssociations.UIState\">\r\n    <expand />\r\n    <select />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 5fe09e11dbe727b0f3527ed388757f2d072987e0)
+++ b/.idea/workspace.xml	(date 1713663154686)
@@ -6,22 +6,15 @@
   <component name="ChangeListManager">
     <list default="true" id="e5df700f-7446-4147-a3d8-5f63a9c4a9fc" name="Changes" comment="Add displayPuzzle() to Game class by Thuy Vy">
       <change beforePath="$PROJECT_DIR$/.idea/misc.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/misc.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_4_18_2024_7_03_PM__Changes_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_4_18_2024_7_03_PM__Changes_.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_4_19_2024_7_40_PM__Changes_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_4_19_2024_7_40_PM__Changes_.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_4_19_2024_9_30_PM__Changes_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_4_19_2024_9_30_PM__Changes_.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_4_20_2024_2_53_PM__Changes_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_4_20_2024_2_53_PM__Changes_.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_4_20_2024_2_53_PM__Changes_1.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_4_20_2024_2_53_PM__Changes_1.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_4_20_2024_2_54_PM__Changes_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_4_20_2024_2_54_PM__Changes_.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_4_20_2024_6_35_PM__Changes_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_4_20_2024_6_35_PM__Changes_.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_4_20_2024_6_35_PM__Changes_1.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_4_20_2024_6_35_PM__Changes_1.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_4_20_2024_8_36_PM__Changes_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_4_20_2024_8_36_PM__Changes_.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_4_20_2024_8_36_PM__Changes_1.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_4_20_2024_8_36_PM__Changes_1.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_4_20_2024_8_59_PM__Changes_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_4_20_2024_8_59_PM__Changes_.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_4_18_2024_5_19_PM__Changes_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_4_18_2024_5_19_PM__Changes_.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_4_18_2024_6_20_PM__Changes_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_4_18_2024_6_20_PM__Changes_.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_4_18_2024_6_39_PM__Changes_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_4_18_2024_6_39_PM__Changes_.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_4_20_2024_8_40_PM__Changes_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_4_20_2024_8_40_PM__Changes_.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_4_20_2024_9_03_PM__Changes_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_4_20_2024_9_03_PM__Changes_.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/out/production/TeamAvengers-Spring2024/Game.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/TeamAvengers-Spring2024/Game.class" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/out/production/TeamAvengers-Spring2024/Player.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/TeamAvengers-Spring2024/Player.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/out/production/TeamAvengers-Spring2024/Spells.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/TeamAvengers-Spring2024/Spells.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/out/production/TeamAvengers-Spring2024/Spells.txt" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/TeamAvengers-Spring2024/Spells.txt" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/Game.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/Game.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/Player.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/Player.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/Spells.txt" beforeDir="false" afterPath="$PROJECT_DIR$/src/Spells.txt" afterDir="false" />
     </list>
@@ -477,11 +470,48 @@
     <option name="version" value="3" />
   </component>
   <component name="Vcs.Log.Tabs.Properties">
+    <option name="OPEN_GENERIC_TABS">
+      <map>
+        <entry key="f9569c85-04f2-4348-83c0-6c890d061398" value="TOOL_WINDOW" />
+      </map>
+    </option>
+    <option name="RECENT_FILTERS">
+      <map>
+        <entry key="Branch">
+          <value>
+            <list>
+              <RecentGroup>
+                <option name="FILTER_VALUES">
+                  <option value="origin/master" />
+                </option>
+              </RecentGroup>
+            </list>
+          </value>
+        </entry>
+      </map>
+    </option>
     <option name="TAB_STATES">
       <map>
         <entry key="MAIN">
           <value>
             <State />
+          </value>
+        </entry>
+        <entry key="f9569c85-04f2-4348-83c0-6c890d061398">
+          <value>
+            <State>
+              <option name="FILTERS">
+                <map>
+                  <entry key="branch">
+                    <value>
+                      <list>
+                        <option value="origin/master" />
+                      </list>
+                    </value>
+                  </entry>
+                </map>
+              </option>
+            </State>
           </value>
         </entry>
       </map>
