Index: src/Game.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.io.*;\r\nimport java.util.Scanner;\r\nimport java.util.ArrayList;\r\n\r\n/**Class: Game\r\n * @author Team Avengers / Ginette Wilson\r\n * @version 1.0\r\n * Course: ITEC 3860 Spring 2024\r\n * Written: Apr 10, 2024\r\n * This class handles the game logic and user input\r\n */\r\n\r\npublic class Game implements Serializable {\r\n\r\n\r\n    private int currentRoom;\r\n    private transient Scanner scan;\r\n    private boolean gameOver;\r\n    private transient Scanner scanner;\r\n    private Player mainCharacter;\r\n\r\n    // File paths for game elements\r\n    //Ginette Wilson\r\n    private static final String ITEMS_FILE_PATH = \"src/Items.txt\";\r\n    private static final String PUZZLES_FILE_PATH = \"src/Puzzles.txt\";\r\n    private static final String MONSTERS_FILE_PATH = \"src/Monsters.txt\";\r\n    private static final String ROOMS_FILE_PATH = \"src/Rooms.txt\";\r\n    private static final String SPELLS_FILE_PATH = \"src/Spells.txt\";\r\n\r\n\r\n    // ArrayList to store game elements\r\n    //Ginette Wilson\r\n    private static final ArrayList<Item> listOfItems = new ArrayList<>();\r\n    private static final ArrayList<Puzzle> listOfPuzzles = new ArrayList<>();\r\n    private static final ArrayList<Monster> listOfMonsters = new ArrayList<>();\r\n    private static final ArrayList<Rooms> listOfRooms = new ArrayList<>();\r\n    private static final ArrayList<Spells> listOfSpells = new ArrayList<>();\r\n\r\n\r\n    //Ginette Wilson\r\n    public Game() {\r\n        loadGameElements();// Initialize the game map\r\n        System.out.println(listOfRooms.get(2).getRoomPuzzle());\r\n        gameOver = false; // Game over flag\r\n        scanner = new Scanner(System.in); // Scanner for user input\r\n        currentRoom = 0;\r\n        mainCharacter = new Player(25, 10, 10, 7, 20, 5, listOfRooms.get(0));\r\n    }\r\n\r\n    //Method to load game elements\r\n    //Ginette Wilson\r\n    private static void loadGameElements() {\r\n        Item.readItems(ITEMS_FILE_PATH, listOfItems);\r\n        Puzzle.readPuzzles(PUZZLES_FILE_PATH, listOfPuzzles);\r\n        Monster.readMonsters(MONSTERS_FILE_PATH, listOfMonsters);\r\n        Rooms.readRooms(ROOMS_FILE_PATH, listOfRooms);\r\n        Spells.readSpells(SPELLS_FILE_PATH, listOfSpells);\r\n        addItemsToRoom(listOfItems, listOfRooms);\r\n        addMonstersToRoom(listOfMonsters, listOfRooms);\r\n        addPuzzlesToRoom(listOfPuzzles, listOfRooms);\r\n    }\r\n\r\n    //Method to add puzzles to the room\r\n    //Lincoln Bruce\r\n    public static void addPuzzlesToRoom(ArrayList<Puzzle> listOfPuzzles, ArrayList<Rooms> listOfRooms) {\r\n        for (Rooms room : listOfRooms) {\r\n            for (Puzzle puzzle : listOfPuzzles) {\r\n                if (room.getPuzzleIncluded().contains(puzzle.getPuzzleID())) {\r\n                    room.getRoomPuzzle().add(puzzle);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    //Method to add items to the room\r\n    //Lincoln Bruce\r\n    public static void addItemsToRoom(ArrayList<Item> listOfItems, ArrayList<Rooms> listOfRooms) {\r\n        for (Rooms room : listOfRooms) {\r\n            for (Item item : listOfItems) {\r\n                if (room.getItemsIncluded().contains(item.getItemID())) {\r\n                    room.getRoomInventory().add(item);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    //Method to add monsters to the room\r\n    //Lincoln Bruce\r\n    public static void addMonstersToRoom(ArrayList<Monster> listOfMonsters, ArrayList<Rooms> listOfRooms) {\r\n        for (Rooms room : listOfRooms) {\r\n            for (Monster monster : listOfMonsters) {\r\n                if (room.getMonstersIncluded().contains(monster.getMonsterID())) {\r\n                    room.getRoomMonsters().add(monster);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    //Method to run the game\r\n    //Kenny Amador\r\n    public void RunGame() {\r\n        System.out.println(\"Press q at any time if you wish to quit or y to continue\");\r\n        scan = new Scanner(System.in);\r\n        Rooms currentRooms = listOfRooms.get(currentRoom);\r\n        currentRooms.setHasBeenVisited(true);\r\n        System.out.println(currentRooms.getRoomName() + \": \" + currentRooms.getDescription());\r\n        String command = scan.next();\r\n        while (!command.equalsIgnoreCase(\"save\")) {\r\n            System.out.println(\"~~~~~~~~~~\");\r\n            System.out.println(\"Please enter a navigation command north,east,south,west to move around\");\r\n            scan = new Scanner(System.in);\r\n            command = scan.nextLine();\r\n            currentRoom = checkCommand(command, currentRooms, mainCharacter);\r\n            if (currentRoom == -1) {\r\n                System.out.println(\"You cannot go in this direction\");\r\n                continue;\r\n            }\r\n            currentRooms = listOfRooms.get(currentRoom);\r\n            checkRoom(currentRooms);\r\n            System.out.println(currentRooms.getRoomName() + \": \" + currentRooms.getDescription());\r\n            currentRooms.setHasBeenVisited(true);\r\n        }\r\n    }\r\n    public void checkRoom(Rooms rooms){\r\n        if (rooms.getHasBeenVisited()){\r\n            System.out.println(\"You have been here before\");\r\n        }\r\n        if(rooms.getShop()){\r\n            shop(rooms);\r\n        }\r\n//        if (rooms.getRoomPuzzle() != null) {\r\n//            mainCharacter.displayPuzzle(rooms);\r\n//        }\r\n    }\r\n\r\n    public void shop(Rooms rooms){\r\n        mainCharacter.setPlayerCoins(100);\r\n        System.out.println(\"Would you like to shop or sell?\");\r\n        scan = new Scanner(System.in);\r\n        String command = scan.nextLine();\r\n        if(command.equalsIgnoreCase(\"shop\")){\r\n            while(!command.equalsIgnoreCase(\"quit\")){\r\n                System.out.println(\"Which items would you like to buy?\");\r\n                displayItems(rooms);\r\n                command = scan.nextLine();\r\n                buyItem(command,mainCharacter,rooms);\r\n            }\r\n        }\r\n        if(command.equalsIgnoreCase(\"sell\")){\r\n            System.out.println(\"Which items would you like to sell?\");\r\n            command = scan.nextLine();\r\n            sell(command,mainCharacter,rooms);\r\n\r\n        }\r\n\r\n    }\r\n    public void buyItem(String itemName, Player mainCharacter, Rooms currentRoom){\r\n        for (Item item : currentRoom.getRoomInventory()) {\r\n            if (item.getItemName().equalsIgnoreCase(itemName) & mainCharacter.getPlayerCoins() >= item.getItemValue()) {\r\n                mainCharacter.getPlayerInventory().add(item);\r\n                currentRoom.getRoomInventory().remove(item);\r\n                System.out.println(itemName + \" has been added to your inventory.\");\r\n                mainCharacter.setPlayerCoins(mainCharacter.getPlayerCoins() -item.getItemValue());\r\n                return;\r\n            }\r\n        }\r\n        if(itemName.equalsIgnoreCase(\"quit\")){\r\n            System.out.println(\"~~~~~~~~~~~~~\");\r\n            return;\r\n        }\r\n        System.out.println(\"You do not have enough coins\");\r\n    }\r\n\r\n\r\n    //Method to check the command\r\n    //Kenny Amador\r\n    public int checkCommand(String command, Rooms rooms, Player mainCharacter) {\r\n        ArrayList<Integer> connects = rooms.roomExits;\r\n        if (command.equalsIgnoreCase(\"north\")) {\r\n            return connects.get(0) - 1;\r\n        }\r\n        if (command.equalsIgnoreCase(\"east\")) {\r\n            return connects.get(1) - 1;\r\n        }\r\n        if (command.equalsIgnoreCase(\"south\")) {\r\n            return connects.get(2) - 1;\r\n        }\r\n        if (command.equalsIgnoreCase(\"west\")) {\r\n            return connects.get(3) - 1;\r\n        }\r\n        if (command.equalsIgnoreCase(\"look\")) {\r\n            displayItems(rooms);\r\n            return currentRoom;\r\n        }\r\n        if (command.equalsIgnoreCase(\"solve\")) {\r\n            System.out.println(\"~~~~~~~~~~\");\r\n            System.out.println(\"What is your answer?\");\r\n            command = scan.nextLine();\r\n            mainCharacter.solvePuzzle(command,mainCharacter.getPlayerInventory(),listOfItems,rooms,rooms.getRoomPuzzle());\r\n            return currentRoom;\r\n        }\r\n        if (command.equalsIgnoreCase(\"inspect\")) {\r\n            System.out.println(\"~~~~~~~~~~\");\r\n            System.out.println(\"Which item would you like to inspect?\");\r\n            command = scan.nextLine();\r\n            inspectItem(command, mainCharacter);\r\n            return currentRoom;\r\n        }\r\n        if (command.equalsIgnoreCase(\"pickup\")) {\r\n            System.out.println(\"~~~~~~~~~~\");\r\n            System.out.println(\"Which item would you like to pick up?\");\r\n            command = scan.nextLine();\r\n            pickup(command, mainCharacter, rooms);\r\n            return currentRoom;\r\n        }\r\n        if (command.equalsIgnoreCase(\"drop\")) {\r\n            System.out.println(\"~~~~~~~~~~\");\r\n            System.out.println(\"Which item would you like to drop?\");\r\n            command = scan.nextLine();\r\n            drop(command, mainCharacter, rooms);\r\n            return currentRoom;\r\n        }\r\n        if (command.equalsIgnoreCase(\"consume\")) {\r\n            System.out.println(\"~~~~~~~~~~\");\r\n            System.out.println(\"Which item would you like to consume?\");\r\n            command = scan.nextLine();\r\n            consume(command, mainCharacter);\r\n            return currentRoom;\r\n\r\n        }\r\n        if (command.equalsIgnoreCase(\"equip\")) {\r\n            System.out.println(\"~~~~~~~~~~\");\r\n            System.out.println(\"Which item would you like to equip?\");\r\n            command = scan.nextLine();  // continues to use command variable\r\n            mainCharacter.equipItem(command);\r\n            return currentRoom;\r\n        }\r\n        if (command.equalsIgnoreCase(\"unequip\")) {\r\n            mainCharacter.unequipItem();\r\n            return currentRoom;\r\n        }\r\n        if (command.equalsIgnoreCase(\"inventory\")) {\r\n            mainCharacter.inventory();\r\n            return currentRoom;\r\n        }\r\n        if(command.equalsIgnoreCase(\"stats\")){\r\n            displayStats();\r\n            return currentRoom;\r\n        }\r\n        if (command.equalsIgnoreCase(\"save\")) {\r\n            return currentRoom;\r\n        }\r\n        if (command.equalsIgnoreCase(\"examine\")) {\r\n            examine(rooms);\r\n            return currentRoom;\r\n        }\r\n        if (command.equalsIgnoreCase(\"teleport\")) {\r\n            System.out.println(\"~~~~~~~~~~\");\r\n            System.out.println(\"Where would you like to teleport to?\");\r\n            String roomName = scanner.nextLine();\r\n            teleport(roomName);\r\n            return currentRoom;\r\n        }\r\n        if (command.equalsIgnoreCase(\"items\")) {\r\n            mainCharacter.inventory();\r\n            return currentRoom;\r\n        }\r\n        if(command.equalsIgnoreCase(\"help\")){\r\n            helpCommand();\r\n            return currentRoom;\r\n        }\r\n        if (command.equalsIgnoreCase(\"fight\")) {\r\n            System.out.println(\"~~~~~~~~~~\");\r\n            System.out.println(\"Which monster would you like to fight?\");\r\n            command = scan.nextLine();\r\n            attackMonster(command, mainCharacter, rooms);\r\n            return currentRoom;\r\n\r\n        }\r\n\r\n        return -1;\r\n    }\r\n\r\n\r\n    //Method to print monster stats\r\n    //Ginette Wilson\r\n    public void examine(Rooms currentRoom) {\r\n        for (Monster monster : currentRoom.getRoomMonsters()) {\r\n            System.out.println(\"~~~~~~~~~~\");\r\n            System.out.println(\"Name: \" + monster.getName());\r\n            System.out.println(\"Description: \" + monster.getDescription());\r\n            System.out.println(\"Health Points: \" + monster.getHealth());\r\n            System.out.println(\"Attack Damage: \" + monster.getAttack());\r\n            System.out.println(\"Dexterity: \" + monster.getDexterity());\r\n            System.out.println(\"Speed: \" + monster.getSpeed());\r\n            System.out.println(\"~~~~~~~~~~\");\r\n        }\r\n    }\r\n\r\n\r\n    //Method to display items in the room\r\n    //Kenny Amador\r\n    public void displayItems(Rooms rooms) {\r\n        if (rooms.itemsIncluded.get(0).equalsIgnoreCase(\"n/a\")) {\r\n            System.out.println(\"~~~~~~~~~~\");\r\n            System.out.println(\"There are no items in this room\");\r\n        } else if(rooms.getShop()){\r\n            for (Item item : rooms.getRoomInventory()) {\r\n                System.out.println(\"[\"+ item + \"]\" + \" cost: \" + item.getItemValue());\r\n            }\r\n            System.out.println(\"~~~~~~~~~~\");\r\n        }else {\r\n            System.out.print(\"Items in this room: \");\r\n            for (Item item : rooms.getRoomInventory()) {\r\n                System.out.println(\"[\"+ item + \"]\");\r\n            }\r\n            System.out.println(\"~~~~~~~~~~\");\r\n        }\r\n    }//end displayItems\r\n\r\n    // Method to inspect an item in the current room\r\n    //Huyen Pham\r\n    public void inspectItem(String itemName, Player mainCharacter) {\r\n        for (Item item : mainCharacter.getPlayerInventory()) {\r\n            if (item.getItemName().equalsIgnoreCase(itemName)) {\r\n                System.out.println(\"Inspecting: \" + itemName);\r\n                System.out.println(\"Description: \" + item.getItemDescription());\r\n                System.out.println(\"Type: \" + item.getItemType());\r\n                System.out.println(\"Value: \" + item.getItemValue());\r\n                System.out.println(\"~~~~~~~~~~\");\r\n                return;\r\n            }\r\n        }\r\n        System.out.println(itemName + \" is not in your inventory.\");\r\n    }//end inspectItem\r\n    public void sell(String itemName, Player mainCharacter, Rooms currentRoom) {\r\n        for (Item item : mainCharacter.getPlayerInventory()) {\r\n            if (item.getItemName().equalsIgnoreCase(itemName)) {\r\n                mainCharacter.getPlayerInventory().remove(item);\r\n                currentRoom.getRoomInventory().add(item);\r\n                System.out.println(itemName + \" has been dropped from your inventory.\");\r\n                mainCharacter.setPlayerCoins(mainCharacter.getPlayerCoins()+item.getItemValue());\r\n                System.out.println(mainCharacter.getPlayerCoins());\r\n                return;\r\n            }\r\n        }\r\n        if(itemName.equalsIgnoreCase(\"quit\")){\r\n            System.out.println(\"~~~~~~~~~~\");\r\n        }\r\n        System.out.println(\"You have nothing to sell\");\r\n    }\r\n\r\n    //Method to drop an item\r\n    //Thuy Vy\r\n    public void drop(String itemName, Player mainCharacter, Rooms currentRoom) {\r\n        for (Item item : mainCharacter.getPlayerInventory()) {\r\n            if (item.getItemName().equalsIgnoreCase(itemName)) {\r\n                System.out.println(itemName + \" has been dropped from your inventory.\");\r\n                checkAuraDrop(item, mainCharacter);\r\n                mainCharacter.getPlayerInventory().remove(item);\r\n                currentRoom.getRoomInventory().add(item);\r\n                return;\r\n            }\r\n        }\r\n        System.out.println(\"You don't have \" + itemName + \" in your inventory.\");\r\n    }//end drop\r\n\r\n    //Method to pick up an item\r\n    //Thuy Vy\r\n    public void pickup(String itemName, Player mainCharacter, Rooms currentRoom) {\r\n        for (Item item : currentRoom.getRoomInventory()) {\r\n            if (item.getItemName().equalsIgnoreCase(itemName)) {\r\n                mainCharacter.getPlayerInventory().add(item);\r\n                currentRoom.getRoomInventory().remove(item);\r\n                System.out.println(itemName + \" has been added to your inventory.\");\r\n                checkAura(item, mainCharacter);\r\n                return;\r\n            }\r\n        }\r\n        System.out.println(\"There is no \" + itemName + \" in this room.\");\r\n    }\r\n\r\n    //Method to check if the item picked up is an aura\r\n    //Lincoln Bruce\r\n    public void checkAura(Item item, Player mainCharacter) {\r\n       for (Item aura : mainCharacter.getPlayerInventory()) {\r\n           if (aura.getItemType().equalsIgnoreCase(\"aura\")) {\r\n               if (item instanceof Aura) {\r\n                   Aura auraItem = (Aura) item;\r\n                   System.out.println(\"This item boost your stats from the inventory\");\r\n                   mainCharacter.setMagic(mainCharacter.getMagic() + auraItem.getAddedMagic());\r\n                   mainCharacter.setDexterity(mainCharacter.getDexterity() + auraItem.getAddedDex());\r\n                   mainCharacter.setDefense(mainCharacter.getDefense() + auraItem.getAddedDefense());\r\n                   System.out.println(\"Your magic has been boosted by \" + auraItem.getAddedMagic());\r\n                   System.out.println(\"Your dexterity has been boosted by \" + auraItem.getAddedDex());\r\n                   System.out.println(\"Your defense has been boosted by \" + auraItem.getAddedDefense());\r\n               }\r\n           }\r\n       }\r\n    }\r\n\r\n    //Method to check if the item dropped is an aura\r\n    //Lincoln Bruce\r\n    public void checkAuraDrop(Item item, Player mainCharacter) {\r\n        for (Item aura : mainCharacter.getPlayerInventory()) {\r\n            if (aura.getItemType().equalsIgnoreCase(\"aura\")) {\r\n                if (item instanceof Aura) {\r\n                    Aura auraItem = (Aura) item;\r\n                    System.out.println(\"You lost your boosts\");\r\n                    mainCharacter.setMagic(mainCharacter.getMagic() - auraItem.getAddedMagic());\r\n                    mainCharacter.setDexterity(mainCharacter.getDexterity() - auraItem.getAddedDex());\r\n                    mainCharacter.setDefense(mainCharacter.getDefense() - auraItem.getAddedDefense());\r\n                    System.out.println(\"Your magic has been reduced by \" + auraItem.getAddedMagic());\r\n                    System.out.println(\"Your dexterity has been reduced by \" + auraItem.getAddedDex());\r\n                    System.out.println(\"Your defense has been reduced by \" + auraItem.getAddedDefense());\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    //method to be teleported to a room\r\n    //Ginette Wilson\r\n    public void teleport(String roomName) {\r\n        boolean roomFound = false;\r\n        for (Rooms room : listOfRooms) {\r\n            if (room.getRoomName().equalsIgnoreCase(roomName) && room.getHasBeenVisited()) {\r\n                roomFound = true;\r\n                currentRoom = room.getRoomID() - 1;\r\n                System.out.println(\"Teleported to: \" + roomName);\r\n                return;\r\n            }\r\n        }\r\n        if (!roomFound) {\r\n            System.out.println(\"Room \" + roomName + \" not found or hasn't been visited yet.\");\r\n        }\r\n    }\r\n    //method to use healing items\r\n    //Ginette\r\n    public void consume(String itemName, Player player) {\r\n        for (Item item : player.getPlayerInventory()) {\r\n            if (item.getItemName().equalsIgnoreCase(itemName)) {\r\n                if (item instanceof Consumable) {\r\n                    Consumable consumable = (Consumable) item;\r\n                    if (((Consumable) item).getHealedHealth() == 900) {\r\n                        int healedHealth = player.getMaxHealth() / 2;\r\n                        // Remove item from inventory\r\n                        player.getPlayerInventory().remove(item);\r\n                        System.out.println(itemName + \" has been used.\");\r\n                        // Recover player's health\r\n                        player.setHealth(player.getHealth() + healedHealth);\r\n                        System.out.println(\"You have been healed for \" + healedHealth + \" HP.\");\r\n                        return;\r\n                    }\r\n                    else if (((Consumable) item).getHealedMana() == 900) {\r\n                        int healedMana = player.getMaxMana() / 2;\r\n                        // Remove item from inventory\r\n                        player.getPlayerInventory().remove(item);\r\n                        System.out.println(itemName + \" has been used.\");\r\n                        // Recover player's mana\r\n                        player.setMana(player.getMana() + healedMana);\r\n                        System.out.println(\"You have been healed for \" + healedMana + \" MP.\");\r\n                        return;\r\n                    }\r\n                    else if (((Consumable) item).getHealedHealth() == 500) {\r\n                        player.setHealth(player.getMaxHealth());\r\n                        player.getPlayerInventory().remove(item);\r\n                        System.out.println(itemName + \" has been used.\");\r\n                        System.out.println(\"You have been healed to full health.\");\r\n                    }\r\n                    else if (((Consumable) item).getHealedMana() == 500) {\r\n                        player.setMana(player.getMaxMana());\r\n                        player.getPlayerInventory().remove(item);\r\n                        System.out.println(itemName + \" has been used.\");\r\n                        System.out.println(\"You have been healed to full mana.\");\r\n                    }\r\n                    else {\r\n                        int healedHealth = consumable.getHealedHealth();\r\n                        int healedMana = consumable.getHealedMana();\r\n                        // Remove item from inventory\r\n                        player.getPlayerInventory().remove(item);\r\n                        System.out.println(itemName + \" has been used.\");\r\n                        // Recover player's health and mana\r\n                        player.setHealth(player.getHealth() + healedHealth);\r\n                        player.setMana(player.getMana() + healedMana);\r\n                        System.out.println(\"You have been healed for \" + healedHealth + \" HP and \" + healedMana + \" MP.\");\r\n                        return;\r\n                    }\r\n\r\n                } else {\r\n                    System.out.println(itemName + \" is not a healing item.\");\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n        System.out.println(itemName + \" not found in inventory.\");\r\n    }\r\n\r\n    // method to use damaging items\r\n    //Ginette Wilson\r\n    public void throwItem(String itemName, Monster monster, Player player) {\r\n        for (Item item : player.getPlayerInventory()) {\r\n            if (item.getItemName().equalsIgnoreCase(itemName)) {\r\n                if (item instanceof Throwable) {\r\n                    Throwable throwable = (Throwable) item;\r\n                    int damageDealt = throwable.getDamageDealt();\r\n                    int dexReduction = throwable.getSpeedReduction();\r\n                    // Remove item from inventory\r\n                    player.getPlayerInventory().remove(item);\r\n                    System.out.println(itemName + \" has been used.\");\r\n                    // Deal damage to the monster\r\n                    monster.setHealth(monster.getHealth()-damageDealt);\r\n                    monster.setDexterity(monster.getDexterity()-dexReduction);\r\n                    System.out.println(\"You dealt \" + damageDealt + \" damage to the monster.\");\r\n                    System.out.println(\"You dealt \" + dexReduction + \" dexterity to the monster.\");\r\n                    return;\r\n                } else {\r\n                    System.out.println(itemName + \" is not a damaging item.\");\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n        System.out.println(itemName + \" not found in inventory.\");\r\n    }\r\n\r\n    // Method to display player stats\r\n    //Kenny Amador\r\n    public void displayStats(){\r\n        System.out.println(\"~~~~~~~~~~\");\r\n        System.out.println(\"Health: \" + mainCharacter.getHealth() / mainCharacter.getMaxHealth());\r\n        System.out.println(\"Magic: \" + mainCharacter.getMagic());\r\n        System.out.println(\"Dexterity: \" + mainCharacter.getDexterity());\r\n        System.out.println(\"Speed: \" + mainCharacter.getSpeed());\r\n        System.out.println(\"Mana: \" + mainCharacter.getMana() / mainCharacter.getMaxMana());\r\n        System.out.println(\"Defense: \" + mainCharacter.getDefense());\r\n        System.out.println(\"Coins: \" + mainCharacter.getPlayerCoins());\r\n        System.out.println(\"Experience: \" + mainCharacter.getPlayerExp() / mainCharacter.getPlayerMaxExp());\r\n        System.out.println(\"~~~~~~~~~~\");\r\n    }\r\n\r\n    // Method for player to attack a monster\r\n    //Lincoln Bruce\r\n    public void attackMonster(String monsterName, Player mainCharacter, Rooms currentRoom) {\r\n        for (Monster monster : currentRoom.getRoomMonsters()) {\r\n            if (monster.getName().equalsIgnoreCase(monsterName)) {\r\n                mainCharacter.setInBattle(true);\r\n                System.out.println(\"You are now in battle with the \" + monsterName);\r\n                while (mainCharacter.getInBattle()) {\r\n                    if (mainCharacter.getHealth() <= 0) {\r\n                        System.out.println(\"You have been defeated by the \" + monsterName);\r\n                        mainCharacter.setInBattle(false);\r\n                        break;\r\n                    } else if (monster.getHealth() <= 0) {\r\n                        System.out.println(\"You have defeated the \" + monsterName);\r\n                        System.out.println(\"~~~~~~~~~~\");\r\n                        mainCharacter.setPlayerExp(mainCharacter.getPlayerExp() + monster.getExpDrop());\r\n                        System.out.println(\"You have gained \" + monster.getExpDrop() + \" experience points.\");\r\n                        System.out.println(\"~~~~~~~~~~\");\r\n                        mainCharacter.setPlayerCoins(mainCharacter.getPlayerCoins() + monster.getGoldDrop());\r\n                        System.out.println(\"You have gained \" + monster.getGoldDrop() + \" coins.\");\r\n                        System.out.println(\"~~~~~~~~~~\");\r\n                        mainCharacter.levelUp();\r\n                        mainCharacter.setInBattle(false);\r\n                        break;\r\n                    } else {\r\n                        System.out.println(\"Choose an action: attack, consume, or escape\");\r\n                        String action = scanner.nextLine();\r\n                        if (action.equalsIgnoreCase(\"attack\")) {\r\n                            dealDamage(monster);\r\n                            dealDamage2(monster);\r\n                        } else if (action.equalsIgnoreCase(\"consume\")) {\r\n                            System.out.println(\"Which item would you like to consume?\");\r\n                            String itemToConsume = scanner.nextLine();\r\n                            consume(itemToConsume, mainCharacter);\r\n                        } else if (action.equalsIgnoreCase(\"escape\")) {\r\n                            mainCharacter.escape(currentRoom, mainCharacter.getInBattle());\r\n                        }\r\n                        else if (action.equalsIgnoreCase(\"throw\")) {\r\n                            System.out.println(\"Which item would you like to throw?\");\r\n                            String itemToThrow = scanner.nextLine();\r\n                            throwItem(itemToThrow, monster, mainCharacter);\r\n                        }\r\n                        else {\r\n                            System.out.println(\"You can't do that in battle. Please try again.\");\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // Method for the player to deal damage to a monster\r\n    public void dealDamage(Monster monster) {\r\n        mainCharacter.setHitRate((4*mainCharacter.getDexterity()+mainCharacter.getBaseHitRate())-monster.getAvoidRate());\r\n        if (mainCharacter.getHitRate() > 50) {\r\n            monster.setHealth(monster.getHealth() - mainCharacter.getMagic());\r\n            System.out.println(\"You dealt \" + mainCharacter.getMagic() + \" damage to the monster.\");\r\n        } else {\r\n            System.out.println(\"You missed the monster.\");\r\n        }\r\n    }\r\n\r\n    //Method for the monster to deal damage to the player\r\n    public void dealDamage2(Monster monster) {\r\n        monster.setHitRate((4*monster.getDexterity())-mainCharacter.getAvoidRate());\r\n        if (monster.getHitRate() > 50) {\r\n            mainCharacter.setHealth(mainCharacter.getHealth() - monster.getAttack());\r\n            System.out.println(\"The monster dealt \" + monster.getAttack() + \" damage to you.\");\r\n        } else {\r\n            System.out.println(\"The monster missed you.\");\r\n        }\r\n    }\r\n\r\n\r\n    //help command\r\n    public void helpCommand(){\r\n        System.out.println(\"(north,east,south,west)--move around\");\r\n        System.out.println(\"(look)--examine the room\");\r\n        System.out.println(\"(inspect)--inspect an item\");\r\n        System.out.println(\"(pickup)--pickup an item\");\r\n        System.out.println(\"(drop)--drop an item\");\r\n        System.out.println(\"(equip)--equip an item\");\r\n        System.out.println(\"(unequip)--unequip an item\");\r\n        System.out.println(\"(stats)--view player stats\");\r\n        System.out.println(\"(save)--save current progress\");\r\n        System.out.println(\"(inventory)--view inventory\");\r\n        System.out.println(\"(consume)--consume an item\");\r\n        System.out.println(\"(fight)--fight a monster\");\r\n        System.out.println(\"(teleport)--teleport to a room\");\r\n    }\r\n\r\n}//end Game
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Game.java b/src/Game.java
--- a/src/Game.java	
+++ b/src/Game.java	
@@ -1,4 +1,5 @@
 import java.io.*;
+import java.util.Random;
 import java.util.Scanner;
 import java.util.ArrayList;
 
@@ -25,7 +26,7 @@
     private static final String PUZZLES_FILE_PATH = "src/Puzzles.txt";
     private static final String MONSTERS_FILE_PATH = "src/Monsters.txt";
     private static final String ROOMS_FILE_PATH = "src/Rooms.txt";
-    private static final String SPELLS_FILE_PATH = "src/Spells.txt";
+    private static final String SPELLS_FILE_PATH = "src/spells.txt";
 
 
     // ArrayList to store game elements
@@ -40,7 +41,6 @@
     //Ginette Wilson
     public Game() {
         loadGameElements();// Initialize the game map
-        System.out.println(listOfRooms.get(2).getRoomPuzzle());
         gameOver = false; // Game over flag
         scanner = new Scanner(System.in); // Scanner for user input
         currentRoom = 0;
@@ -53,12 +53,13 @@
         Item.readItems(ITEMS_FILE_PATH, listOfItems);
         Puzzle.readPuzzles(PUZZLES_FILE_PATH, listOfPuzzles);
         Monster.readMonsters(MONSTERS_FILE_PATH, listOfMonsters);
-        Rooms.readRooms(ROOMS_FILE_PATH, listOfRooms);
-        Spells.readSpells(SPELLS_FILE_PATH, listOfSpells);
         addItemsToRoom(listOfItems, listOfRooms);
         addMonstersToRoom(listOfMonsters, listOfRooms);
         addPuzzlesToRoom(listOfPuzzles, listOfRooms);
+        Rooms.readRooms(ROOMS_FILE_PATH, listOfRooms);
+        Spells.readSpells(SPELLS_FILE_PATH, listOfSpells);
     }
+
 
     //Method to add puzzles to the room
     //Lincoln Bruce
@@ -105,6 +106,7 @@
         currentRooms.setHasBeenVisited(true);
         System.out.println(currentRooms.getRoomName() + ": " + currentRooms.getDescription());
         String command = scan.next();
+//        System.out.println(mainCharacter.getPlayerSpells().get(0));
         while (!command.equalsIgnoreCase("save")) {
             System.out.println("~~~~~~~~~~");
             System.out.println("Please enter a navigation command north,east,south,west to move around");
@@ -121,11 +123,12 @@
             currentRooms.setHasBeenVisited(true);
         }
     }
-    public void checkRoom(Rooms rooms){
-        if (rooms.getHasBeenVisited()){
+
+    public void checkRoom(Rooms rooms) {
+        if (rooms.getHasBeenVisited()) {
             System.out.println("You have been here before");
         }
-        if(rooms.getShop()){
+        if (rooms.getShop()) {
             shop(rooms);
         }
 //        if (rooms.getRoomPuzzle() != null) {
@@ -133,38 +136,39 @@
 //        }
     }
 
-    public void shop(Rooms rooms){
+    public void shop(Rooms rooms) {
         mainCharacter.setPlayerCoins(100);
         System.out.println("Would you like to shop or sell?");
         scan = new Scanner(System.in);
         String command = scan.nextLine();
-        if(command.equalsIgnoreCase("shop")){
-            while(!command.equalsIgnoreCase("quit")){
+        if (command.equalsIgnoreCase("shop")) {
+            while (!command.equalsIgnoreCase("quit")) {
                 System.out.println("Which items would you like to buy?");
                 displayItems(rooms);
                 command = scan.nextLine();
-                buyItem(command,mainCharacter,rooms);
+                buyItem(command, mainCharacter, rooms);
             }
         }
-        if(command.equalsIgnoreCase("sell")){
+        if (command.equalsIgnoreCase("sell")) {
             System.out.println("Which items would you like to sell?");
             command = scan.nextLine();
-            sell(command,mainCharacter,rooms);
+            sell(command, mainCharacter, rooms);
 
         }
 
     }
-    public void buyItem(String itemName, Player mainCharacter, Rooms currentRoom){
+
+    public void buyItem(String itemName, Player mainCharacter, Rooms currentRoom) {
         for (Item item : currentRoom.getRoomInventory()) {
             if (item.getItemName().equalsIgnoreCase(itemName) & mainCharacter.getPlayerCoins() >= item.getItemValue()) {
                 mainCharacter.getPlayerInventory().add(item);
                 currentRoom.getRoomInventory().remove(item);
                 System.out.println(itemName + " has been added to your inventory.");
-                mainCharacter.setPlayerCoins(mainCharacter.getPlayerCoins() -item.getItemValue());
+                mainCharacter.setPlayerCoins(mainCharacter.getPlayerCoins() - item.getItemValue());
                 return;
             }
         }
-        if(itemName.equalsIgnoreCase("quit")){
+        if (itemName.equalsIgnoreCase("quit")) {
             System.out.println("~~~~~~~~~~~~~");
             return;
         }
@@ -196,7 +200,7 @@
             System.out.println("~~~~~~~~~~");
             System.out.println("What is your answer?");
             command = scan.nextLine();
-            mainCharacter.solvePuzzle(command,mainCharacter.getPlayerInventory(),listOfItems,rooms,rooms.getRoomPuzzle());
+            mainCharacter.solvePuzzle(command, mainCharacter.getPlayerInventory(), listOfItems, rooms, rooms.getRoomPuzzle());
             return currentRoom;
         }
         if (command.equalsIgnoreCase("inspect")) {
@@ -243,7 +247,7 @@
             mainCharacter.inventory();
             return currentRoom;
         }
-        if(command.equalsIgnoreCase("stats")){
+        if (command.equalsIgnoreCase("stats")) {
             displayStats();
             return currentRoom;
         }
@@ -265,7 +269,7 @@
             mainCharacter.inventory();
             return currentRoom;
         }
-        if(command.equalsIgnoreCase("help")){
+        if (command.equalsIgnoreCase("help")) {
             helpCommand();
             return currentRoom;
         }
@@ -277,6 +281,10 @@
             return currentRoom;
 
         }
+        if (command.equalsIgnoreCase("Eye of truth")) {
+            eyeOfTruth(rooms);
+            return currentRoom;
+        }
 
         return -1;
     }
@@ -304,15 +312,15 @@
         if (rooms.itemsIncluded.get(0).equalsIgnoreCase("n/a")) {
             System.out.println("~~~~~~~~~~");
             System.out.println("There are no items in this room");
-        } else if(rooms.getShop()){
+        } else if (rooms.getShop()) {
             for (Item item : rooms.getRoomInventory()) {
-                System.out.println("["+ item + "]" + " cost: " + item.getItemValue());
+                System.out.println("[" + item + "]" + " cost: " + item.getItemValue());
             }
             System.out.println("~~~~~~~~~~");
-        }else {
+        } else {
             System.out.print("Items in this room: ");
             for (Item item : rooms.getRoomInventory()) {
-                System.out.println("["+ item + "]");
+                System.out.println("[" + item + "]");
             }
             System.out.println("~~~~~~~~~~");
         }
@@ -333,18 +341,19 @@
         }
         System.out.println(itemName + " is not in your inventory.");
     }//end inspectItem
+
     public void sell(String itemName, Player mainCharacter, Rooms currentRoom) {
         for (Item item : mainCharacter.getPlayerInventory()) {
             if (item.getItemName().equalsIgnoreCase(itemName)) {
                 mainCharacter.getPlayerInventory().remove(item);
                 currentRoom.getRoomInventory().add(item);
                 System.out.println(itemName + " has been dropped from your inventory.");
-                mainCharacter.setPlayerCoins(mainCharacter.getPlayerCoins()+item.getItemValue());
+                mainCharacter.setPlayerCoins(mainCharacter.getPlayerCoins() + item.getItemValue());
                 System.out.println(mainCharacter.getPlayerCoins());
                 return;
             }
         }
-        if(itemName.equalsIgnoreCase("quit")){
+        if (itemName.equalsIgnoreCase("quit")) {
             System.out.println("~~~~~~~~~~");
         }
         System.out.println("You have nothing to sell");
@@ -383,20 +392,20 @@
     //Method to check if the item picked up is an aura
     //Lincoln Bruce
     public void checkAura(Item item, Player mainCharacter) {
-       for (Item aura : mainCharacter.getPlayerInventory()) {
-           if (aura.getItemType().equalsIgnoreCase("aura")) {
-               if (item instanceof Aura) {
-                   Aura auraItem = (Aura) item;
-                   System.out.println("This item boost your stats from the inventory");
-                   mainCharacter.setMagic(mainCharacter.getMagic() + auraItem.getAddedMagic());
-                   mainCharacter.setDexterity(mainCharacter.getDexterity() + auraItem.getAddedDex());
-                   mainCharacter.setDefense(mainCharacter.getDefense() + auraItem.getAddedDefense());
-                   System.out.println("Your magic has been boosted by " + auraItem.getAddedMagic());
-                   System.out.println("Your dexterity has been boosted by " + auraItem.getAddedDex());
-                   System.out.println("Your defense has been boosted by " + auraItem.getAddedDefense());
-               }
-           }
-       }
+        for (Item aura : mainCharacter.getPlayerInventory()) {
+            if (aura.getItemType().equalsIgnoreCase("aura")) {
+                if (item instanceof Aura) {
+                    Aura auraItem = (Aura) item;
+                    System.out.println("This item boost your stats from the inventory");
+                    mainCharacter.setMagic(mainCharacter.getMagic() + auraItem.getAddedMagic());
+                    mainCharacter.setDexterity(mainCharacter.getDexterity() + auraItem.getAddedDex());
+                    mainCharacter.setDefense(mainCharacter.getDefense() + auraItem.getAddedDefense());
+                    System.out.println("Your magic has been boosted by " + auraItem.getAddedMagic());
+                    System.out.println("Your dexterity has been boosted by " + auraItem.getAddedDex());
+                    System.out.println("Your defense has been boosted by " + auraItem.getAddedDefense());
+                }
+            }
+        }
     }
 
     //Method to check if the item dropped is an aura
@@ -434,6 +443,7 @@
             System.out.println("Room " + roomName + " not found or hasn't been visited yet.");
         }
     }
+
     //method to use healing items
     //Ginette
     public void consume(String itemName, Player player) {
@@ -450,8 +460,7 @@
                         player.setHealth(player.getHealth() + healedHealth);
                         System.out.println("You have been healed for " + healedHealth + " HP.");
                         return;
-                    }
-                    else if (((Consumable) item).getHealedMana() == 900) {
+                    } else if (((Consumable) item).getHealedMana() == 900) {
                         int healedMana = player.getMaxMana() / 2;
                         // Remove item from inventory
                         player.getPlayerInventory().remove(item);
@@ -460,20 +469,17 @@
                         player.setMana(player.getMana() + healedMana);
                         System.out.println("You have been healed for " + healedMana + " MP.");
                         return;
-                    }
-                    else if (((Consumable) item).getHealedHealth() == 500) {
+                    } else if (((Consumable) item).getHealedHealth() == 500) {
                         player.setHealth(player.getMaxHealth());
                         player.getPlayerInventory().remove(item);
                         System.out.println(itemName + " has been used.");
                         System.out.println("You have been healed to full health.");
-                    }
-                    else if (((Consumable) item).getHealedMana() == 500) {
+                    } else if (((Consumable) item).getHealedMana() == 500) {
                         player.setMana(player.getMaxMana());
                         player.getPlayerInventory().remove(item);
                         System.out.println(itemName + " has been used.");
                         System.out.println("You have been healed to full mana.");
-                    }
-                    else {
+                    } else {
                         int healedHealth = consumable.getHealedHealth();
                         int healedMana = consumable.getHealedMana();
                         // Remove item from inventory
@@ -508,8 +514,8 @@
                     player.getPlayerInventory().remove(item);
                     System.out.println(itemName + " has been used.");
                     // Deal damage to the monster
-                    monster.setHealth(monster.getHealth()-damageDealt);
-                    monster.setDexterity(monster.getDexterity()-dexReduction);
+                    monster.setHealth(monster.getHealth() - damageDealt);
+                    monster.setDexterity(monster.getDexterity() - dexReduction);
                     System.out.println("You dealt " + damageDealt + " damage to the monster.");
                     System.out.println("You dealt " + dexReduction + " dexterity to the monster.");
                     return;
@@ -524,7 +530,7 @@
 
     // Method to display player stats
     //Kenny Amador
-    public void displayStats(){
+    public void displayStats() {
         System.out.println("~~~~~~~~~~");
         System.out.println("Health: " + mainCharacter.getHealth() / mainCharacter.getMaxHealth());
         System.out.println("Magic: " + mainCharacter.getMagic());
@@ -558,7 +564,7 @@
                         mainCharacter.setPlayerCoins(mainCharacter.getPlayerCoins() + monster.getGoldDrop());
                         System.out.println("You have gained " + monster.getGoldDrop() + " coins.");
                         System.out.println("~~~~~~~~~~");
-                        mainCharacter.levelUp();
+                        mainCharacter.levelUp(listOfSpells);
                         mainCharacter.setInBattle(false);
                         break;
                     } else {
@@ -573,13 +579,15 @@
                             consume(itemToConsume, mainCharacter);
                         } else if (action.equalsIgnoreCase("escape")) {
                             mainCharacter.escape(currentRoom, mainCharacter.getInBattle());
-                        }
-                        else if (action.equalsIgnoreCase("throw")) {
+                        } else if (action.equalsIgnoreCase("throw")) {
                             System.out.println("Which item would you like to throw?");
                             String itemToThrow = scanner.nextLine();
                             throwItem(itemToThrow, monster, mainCharacter);
-                        }
-                        else {
+                        } else if (action.equalsIgnoreCase("spells")) {
+                            System.out.println("Which spell will you like to case");
+                            String spells = scanner.nextLine();
+                            activateSpells(spells, monster, mainCharacter);
+                        } else {
                             System.out.println("You can't do that in battle. Please try again.");
                         }
                     }
@@ -590,7 +598,7 @@
 
     // Method for the player to deal damage to a monster
     public void dealDamage(Monster monster) {
-        mainCharacter.setHitRate((4*mainCharacter.getDexterity()+mainCharacter.getBaseHitRate())-monster.getAvoidRate());
+        mainCharacter.setHitRate((4 * mainCharacter.getDexterity() + mainCharacter.getBaseHitRate()) - monster.getAvoidRate());
         if (mainCharacter.getHitRate() > 50) {
             monster.setHealth(monster.getHealth() - mainCharacter.getMagic());
             System.out.println("You dealt " + mainCharacter.getMagic() + " damage to the monster.");
@@ -601,7 +609,7 @@
 
     //Method for the monster to deal damage to the player
     public void dealDamage2(Monster monster) {
-        monster.setHitRate((4*monster.getDexterity())-mainCharacter.getAvoidRate());
+        monster.setHitRate((4 * monster.getDexterity()) - mainCharacter.getAvoidRate());
         if (monster.getHitRate() > 50) {
             mainCharacter.setHealth(mainCharacter.getHealth() - monster.getAttack());
             System.out.println("The monster dealt " + monster.getAttack() + " damage to you.");
@@ -612,7 +620,7 @@
 
 
     //help command
-    public void helpCommand(){
+    public void helpCommand() {
         System.out.println("(north,east,south,west)--move around");
         System.out.println("(look)--examine the room");
         System.out.println("(inspect)--inspect an item");
@@ -628,4 +636,78 @@
         System.out.println("(teleport)--teleport to a room");
     }
 
+
+    public void eyeOfTruth(Rooms currentRoom) {
+        if (!currentRoom.getPuzzleIncluded().contains("N/A")) {
+            System.out.println(listOfPuzzles.get(listOfRooms.indexOf(currentRoom)).getHint());
+        } else {
+            System.out.println("There are no puzzles in this room");
+        }
+    }
+
+    public void activateSpells(String spellName, Monster monster, Player mainCharacter) {
+        if (spellName.equalsIgnoreCase("Ray of fire")) {
+            for (Spells spell : listOfSpells) {
+                if (mainCharacter.getPlayerLevel() >= spell.getLevelNeeded() & spell.getName().equalsIgnoreCase(spellName)) {
+                    monster.setHealth(monster.getHealth() - spell.getEffects());
+                    mainCharacter.setMana(mainCharacter.getMana() - spell.getManaCost());
+                }
+            }
+        }//end if
+        if(spellName.equalsIgnoreCase("Flame Shield")){
+            for (Spells spell : listOfSpells) {
+                if (mainCharacter.getPlayerLevel() >= spell.getLevelNeeded() & spell.getName().equalsIgnoreCase(spellName)) {
+                    mainCharacter.setDefense(mainCharacter.getDefense() + spell.getEffects());
+                    mainCharacter.setMana(mainCharacter.getMana() - spell.getManaCost());
+                }
+            }
+        }//end if
+
+        if(spellName.equalsIgnoreCase("Heat Wave")){
+            for (Spells spell : listOfSpells) {
+                if (mainCharacter.getPlayerLevel() >= spell.getLevelNeeded() & spell.getName().equalsIgnoreCase(spellName)) {
+                    mainCharacter.setDefense(mainCharacter.getDefense() + spell.getEffects());
+                    mainCharacter.setDefense(mainCharacter.getDefense() - spell.getEffects());
+                    mainCharacter.setMana(mainCharacter.getMana() - spell.getManaCost());
+                }
+            }
+        }
+        if(spellName.equalsIgnoreCase("Meteor Storm")){
+            Random random = new Random();
+            int meteors = random.nextInt();
+            for (Spells spell : listOfSpells) {
+                if (mainCharacter.getPlayerLevel() >= spell.getLevelNeeded() & spell.getName().equalsIgnoreCase(spellName)) {
+                    mainCharacter.setHealth(mainCharacter.getMaxHealth() - (meteors * spell.getEffects()));
+                    mainCharacter.setMana(mainCharacter.getMana() - spell.getManaCost());
+                }
+            }
+        }
+        if(spellName.equalsIgnoreCase("flame master")){
+            for (Spells spell : listOfSpells) {
+                if (mainCharacter.getPlayerLevel() >= spell.getLevelNeeded() & spell.getName().equalsIgnoreCase(spellName)) {
+                    mainCharacter.setHealth(mainCharacter.getHealth() + spell.getEffects());
+                    mainCharacter.setDefense(mainCharacter.getDefense() + spell.getEffects());
+                    mainCharacter.setMana(mainCharacter.getMana() - spell.getManaCost());
+                }
+            }
+        }
+
+        if(spellName.equalsIgnoreCase("Ice Shield")) {
+            for (Spells spell : listOfSpells) {
+                if (mainCharacter.getPlayerLevel() >= spell.getLevelNeeded() & spell.getName().equalsIgnoreCase(spellName)) {
+                    mainCharacter.setDefense(mainCharacter.getDefense() + spell.getEffects());
+                    mainCharacter.setMana(mainCharacter.getMana() - spell.getManaCost());
+                }
+            }
+        }
+        else{
+            System.out.println("You cannot use this spell");
+        }
+    }
+
+
+   // public void spells(String sp)
+
+
+
 }//end Game
\ No newline at end of file
Index: src/Spells.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.io.File;\r\nimport java.util.ArrayList;\r\nimport java.util.Scanner;\r\n\r\n//Thuy Vy Pham\r\npublic class Spells\r\n{\r\n    private String id;\r\n    private String name;\r\n    private String description;\r\n\r\n    public Spells(String id, String name, String description) {\r\n        this.id = id;\r\n        this.name = name;\r\n        this.description = description;\r\n    }\r\n\r\n    public String getId() {\r\n        return id;\r\n    }\r\n    public void setId(String id) {\r\n        this.id = id;\r\n    }\r\n    public String getName() {\r\n        return name;\r\n    }\r\n    public void setName(String name) {\r\n        this.name = name;\r\n    }\r\n    public String getDescription() {\r\n        return description;\r\n    }\r\n    public void setDescription(String description) {\r\n        this.description = description;\r\n    }\r\n\r\n    //Read Spells from file\r\n    //Thuy Vy Pham\r\n    public static void readSpells(String filePath, ArrayList<Spells> listOfSpells) {\r\n        try{\r\n            File mySpells = new File(filePath);\r\n            Scanner myReader = new Scanner(mySpells);\r\n            while (myReader.hasNextLine()) {\r\n                String data = myReader.nextLine();\r\n                String[] spellData = data.split(\"-\");\r\n                String spellID = spellData[0];\r\n                String name = spellData[1];\r\n                String description = spellData[2];\r\n                Spells spells = new Spells(spellID, name, description);\r\n                listOfSpells.add(spells);\r\n            }\r\n        } catch(Exception e){\r\n            System.out.println(\"An error occurred with the spell file.\");\r\n        }\r\n    }\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Spells.java b/src/Spells.java
--- a/src/Spells.java	
+++ b/src/Spells.java	
@@ -5,25 +5,31 @@
 //Thuy Vy Pham
 public class Spells
 {
-    private String id;
     private String name;
     private String description;
+    private int effects;
+    private int manaCost;
 
-    public Spells(String id, String name, String description) {
-        this.id = id;
+    private int levelNeeded;
+
+    public Spells(String name, String description, int effects, int manaCost,int levelNeeded) {
         this.name = name;
         this.description = description;
+        this.effects = effects;
+        this.manaCost = manaCost;
+        this.levelNeeded = levelNeeded;
     }
 
-    public String getId() {
-        return id;
-    }
-    public void setId(String id) {
-        this.id = id;
-    }
+
     public String getName() {
         return name;
     }
+    public int getEffects(){return effects;}
+    public int getLevelNeeded(){return levelNeeded;}
+    public int getManaCost(){return manaCost;}
+
+    public void setManaCost(int manaCost){this.manaCost = manaCost;}
+    public void setEffects(int effects){this.effects = effects;}
     public void setName(String name) {
         this.name = name;
     }
@@ -42,12 +48,15 @@
             Scanner myReader = new Scanner(mySpells);
             while (myReader.hasNextLine()) {
                 String data = myReader.nextLine();
-                String[] spellData = data.split("-");
-                String spellID = spellData[0];
-                String name = spellData[1];
-                String description = spellData[2];
-                Spells spells = new Spells(spellID, name, description);
+                String[] line = data.split("-");
+                String name = line[0];
+                String description = line[1];
+                int levelNeed = Integer.parseInt(line[2]);
+                int effects = Integer.parseInt(line[3]);
+                int manaCost = Integer.parseInt(line[4]);
+                Spells spells = new Spells(name, description,effects,manaCost,levelNeed);
                 listOfSpells.add(spells);
+
             }
         } catch(Exception e){
             System.out.println("An error occurred with the spell file.");
Index: src/Player.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.util.ArrayList;\r\nimport java.util.Scanner;\r\n\r\n/**Class: Player\r\n * @author Team Avengers / Lincoln Bruce\r\n * @version 1.0\r\n * Course: ITEC 3860 Spring 2024\r\n * Written: Apr 9, 2024\r\n * This class represents a player entity within a game. Each player object encapsulates information\r\n */\r\n\r\npublic class Player {\r\n\r\n    //Player attributes\r\n    //Lincoln Bruce\r\n    private int health;\r\n    private int maxHealth;\r\n    private int magic;\r\n    private int dexterity;\r\n    private int speed;\r\n    private int maxMana;\r\n    private int mana;\r\n    private int defense;\r\n    private int playerCoins;\r\n    private Rooms currentRoom;\r\n    private ArrayList<Item> PlayerInventory;\r\n    private ArrayList<Spells> PlayerSpells;\r\n    private Equipable equippedItem;\r\n    private int baseHitRate;\r\n    private int hitRate;\r\n    private int AvoidRate;\r\n    private boolean inBattle;\r\n    private int playerLevel;\r\n    private int playerExp;\r\n    private int playerMaxExp;\r\n\r\n    public Player(int health, int magic, int dexterity, int speed, int mana, int defense, Rooms currentRoom) {\r\n        this.health = health;\r\n        this.maxHealth = health;\r\n        this.magic = magic;\r\n        this.dexterity = dexterity;\r\n        this.speed = speed;\r\n        this.mana = mana;\r\n        this.maxMana = mana;\r\n        this.defense = defense;\r\n        this.playerCoins = 0;\r\n        this.currentRoom = currentRoom;\r\n        this.PlayerInventory = new ArrayList<>();\r\n        this.PlayerSpells = new ArrayList<>();\r\n        this.equippedItem = null;\r\n        this.baseHitRate = 80;\r\n        this.hitRate = 0;\r\n        this.AvoidRate = 4 * speed;\r\n        this.inBattle = false;\r\n        this.playerLevel = 1;\r\n        this.playerExp = 0;\r\n        this.playerMaxExp = 100;\r\n    }\r\n\r\n    //Getters and Setters\r\n    //Lincoln Bruce\r\n    public int getHealth() {\r\n        return health;\r\n    }\r\n\r\n    public void setHealth(int health) {\r\n        this.health = health;\r\n    }\r\n\r\n    public int getMaxHealth() {\r\n        return maxHealth;\r\n    }\r\n\r\n    public void setMaxHealth(int maxHealth) {\r\n        this.maxHealth = maxHealth;\r\n    }\r\n\r\n    public int getMagic() {\r\n        return magic;\r\n    }\r\n\r\n    public void setMagic(int magic) {\r\n        this.magic = magic;\r\n    }\r\n\r\n    public int getDexterity() {\r\n        return dexterity;\r\n    }\r\n\r\n    public void setDexterity(int dexterity) {\r\n        this.dexterity = dexterity;\r\n    }\r\n\r\n    public int getSpeed() {\r\n        return speed;\r\n    }\r\n\r\n    public void setSpeed(int speed) {\r\n        this.speed = speed;\r\n    }\r\n\r\n    public int getMana() {\r\n        return mana;\r\n    }\r\n\r\n    public void setMana(int mana) {\r\n        this.mana = mana;\r\n    }\r\n\r\n    public int getMaxMana() {\r\n        return maxMana;\r\n    }\r\n\r\n    public void setMaxMana(int maxMana) {\r\n        this.maxMana = maxMana;\r\n    }\r\n\r\n    public int getDefense() {\r\n        return defense;\r\n    }\r\n\r\n    public void setDefense(int defense) {\r\n        this.defense = defense;\r\n    }\r\n\r\n    public int getPlayerCoins() {\r\n        return playerCoins;\r\n    }\r\n\r\n    public void setPlayerCoins(int playerCoins) {\r\n        this.playerCoins = playerCoins;\r\n    }\r\n\r\n    public Rooms getCurrentRoom() {\r\n        return currentRoom;\r\n    }\r\n\r\n    public void setCurrentRoom(Rooms currentRoom) {\r\n        this.currentRoom = currentRoom;\r\n    }\r\n\r\n    public ArrayList<Item> getPlayerInventory() {\r\n        return PlayerInventory;\r\n    }\r\n\r\n    public void setPlayerInventory(ArrayList<Item> playerInventory) {\r\n        PlayerInventory = playerInventory;\r\n    }\r\n\r\n    public ArrayList<Spells> getPlayerSpells() {\r\n        return PlayerSpells;\r\n    }\r\n\r\n    public void setPlayerSpells(ArrayList<Spells> playerSpells) {\r\n        PlayerSpells = playerSpells;\r\n    }\r\n\r\n    public Equipable getEquippedItem() {\r\n        return equippedItem;\r\n    }\r\n\r\n    public void setEquippedItem(Equipable equippedItem) {\r\n        this.equippedItem = equippedItem;\r\n    }\r\n\r\n    public int getHitRate() {\r\n        return hitRate;\r\n    }\r\n\r\n    public void setHitRate(int hitRate) {\r\n        this.hitRate = hitRate;\r\n    }\r\n\r\n    public int getAvoidRate() {\r\n        return AvoidRate;\r\n    }\r\n\r\n    public void setAvoidRate(int AvoidRate) {\r\n        this.AvoidRate = AvoidRate;\r\n    }\r\n\r\n    public boolean getInBattle() {\r\n        return inBattle;\r\n    }\r\n\r\n    public void setInBattle(boolean inBattle) {\r\n        this.inBattle = inBattle;\r\n    }\r\n\r\n    public int getBaseHitRate() {\r\n        return baseHitRate;\r\n    }\r\n\r\n    public void setBaseHitRate(int baseHitRate) {\r\n        this.baseHitRate = baseHitRate;\r\n    }\r\n\r\n    public int getPlayerLevel() {\r\n        return playerLevel;\r\n    }\r\n\r\n    public void setPlayerLevel(int playerLevel) {\r\n        this.playerLevel = playerLevel;\r\n    }\r\n\r\n    public int getPlayerExp() {\r\n        return playerExp;\r\n    }\r\n\r\n    public void setPlayerExp(int playerExp) {\r\n        this.playerExp = playerExp;\r\n    }\r\n\r\n    public int getPlayerMaxExp() {\r\n        return playerMaxExp;\r\n    }\r\n\r\n    public void setPlayerMaxExp(int playerMaxExp) {\r\n        this.playerMaxExp = playerMaxExp;\r\n    }\r\n\r\n    //Method to display the player inventory\r\n    //Thuy Vy\r\n    public void inventory() {\r\n        if (getPlayerInventory().isEmpty()) {\r\n            System.out.println(\"You didn't pick up any items yet.\");\r\n        } else {\r\n            System.out.println(\"Inventory:\");\r\n            for (Item item : getPlayerInventory()) {\r\n                System.out.println(\"- \" + item.getItemName());\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    // method to escape from the battle\r\n    // Ginette Wilson\r\n    public void escape(Rooms previousRoom, boolean inBattle) {\r\n        if (inBattle) {\r\n            System.out.println(\"You escaped from the battle!\");\r\n            setInBattle(false);\r\n            // Set the current room to the previous room\r\n            this.setCurrentRoom(previousRoom);\r\n            // Set the previous room as visited since the player returns to it\r\n            previousRoom.setHasBeenVisited(true);\r\n        } else {\r\n            System.out.println(\"You cannot escape because you are not in battle!\");\r\n        }\r\n    }\r\n\r\n    // Huyen Pham &  Ginette Wilson\r\n    public void equipItem(String itemName) {\r\n        boolean itemFound = false;\r\n        for (Item item : PlayerInventory) {\r\n            if (item.getItemName().equalsIgnoreCase(itemName)) {\r\n                itemFound = true;\r\n                if (item instanceof Equipable) {\r\n                    if (equippedItem != null) {\r\n                        unequipItem(); // Unequip current item before equipping a new one\r\n                    }\r\n                    equippedItem = (Equipable) item;\r\n                    applyStats(equippedItem);\r\n                    System.out.println(\"Equipped: \" + itemName);\r\n                    return;\r\n                } else {\r\n                    System.out.println(itemName + \" is not an equipable item.\");\r\n                }\r\n            }\r\n        }\r\n        if (!itemFound) {\r\n            System.out.println(itemName + \" not found in inventory.\");\r\n        }\r\n    }\r\n\r\n\r\n    // Method to unequip the current item and revert stat changes\r\n    // Huyen Pham\r\n    public void unequipItem() {\r\n        if (equippedItem != null) {\r\n            revertStats(equippedItem);\r\n            System.out.println(\"Unequipped: \" + equippedItem.getItemName());\r\n            equippedItem = null;\r\n        } else {\r\n            System.out.println(\"No item is currently equipped.\");\r\n        }\r\n    }\r\n\r\n    // Apply stats from an equipable item\r\n// Huyen Pham\r\n    private void applyStats(Equipable item) {\r\n        // Update player stats based on the equipable item's properties\r\n        this.maxHealth += item.getAddedHealth();\r\n        this.magic += item.getAddedMagic(); // Assuming magic is a player stat\r\n        this.dexterity += item.getAddedDexterity();\r\n        this.speed += item.getAddedSpeed();\r\n        this.defense += item.getAddedDefense();\r\n    }\r\n\r\n    // Revert stats from an unequipped item\r\n//Huyen Pham\r\n    private void revertStats(Equipable item) {\r\n        // Revert player stats when an item is unequipped\r\n        this.maxHealth -= item.getAddedHealth();\r\n        this.magic -= item.getAddedMagic();\r\n        this.dexterity -= item.getAddedDexterity();\r\n        this.speed -= item.getAddedSpeed();\r\n        this.defense -= item.getAddedDefense();\r\n    }\r\n\r\n    //Method to level up the player\r\n    public void levelUp() {\r\n        if (playerExp >= playerMaxExp && playerLevel < 5) {\r\n            if (playerLevel == 1 && playerExp >= 100) {\r\n                playerLevel = 2;\r\n                playerExp = playerExp - playerMaxExp;\r\n                playerMaxExp = 300;\r\n                setMaxHealth(getMaxHealth() + 15);\r\n                setHealth(getMaxHealth());\r\n                setMaxMana(getMaxMana() + 8);\r\n                setMana(getMaxMana());\r\n                setMagic(getMagic() + 5);\r\n                setSpeed(getSpeed() + 3);\r\n                setDexterity(getDexterity() + 8);\r\n                setDefense(getDefense() + 3);\r\n                System.out.println(\"You leveled up to level 2!\");\r\n            } else if (playerLevel == 2 && playerExp >= 300) {\r\n                playerLevel = 3;\r\n                playerExp = playerExp - playerMaxExp;\r\n                playerMaxExp = 600;\r\n                setMaxHealth(getMaxHealth() + 25);\r\n                setHealth(getMaxHealth());\r\n                setMaxMana(getMaxMana() + 8);\r\n                setMana(getMaxMana());\r\n                setMagic(getMagic() + 5);\r\n                setSpeed(getSpeed() + 3);\r\n                setDexterity(getDexterity() + 5);\r\n                setDefense(getDefense() + 3);\r\n                System.out.println(\"You leveled up to level 3!\");\r\n            } else if (playerLevel == 3 && playerExp >= 600) {\r\n                playerLevel = 4;\r\n                playerExp = playerExp - playerMaxExp;\r\n                playerMaxExp = 1000;\r\n                setMaxHealth(getMaxHealth() + 15);\r\n                setHealth(getMaxHealth());\r\n                setMaxMana(getMaxMana() + 8);\r\n                setMana(getMaxMana());\r\n                setMagic(getMagic() + 5);\r\n                setSpeed(getSpeed() + 3);\r\n                setDexterity(getDexterity() + 5);\r\n                setDefense(getDefense() + 3);\r\n                System.out.println(\"You leveled up to level 4!\");\r\n            } else if (playerLevel == 4 && playerExp >= 1000) {\r\n                playerLevel = 5;\r\n                setMaxHealth(getMaxHealth() + 30);\r\n                setHealth(getMaxHealth());\r\n                setMaxMana(getMaxMana() + 16);\r\n                setMana(getMaxMana());\r\n                setMagic(getMagic() + 5);\r\n                setSpeed(getSpeed() + 4);\r\n                setDexterity(getDexterity() + 5);\r\n                setDefense(getDefense() + 3);\r\n                System.out.println(\"You leveled up to level 5!\");\r\n                System.out.println(\"You have reached the maximum level!\");\r\n            }\r\n        }\r\n    }\r\n\r\n    // Method to display puzzle\r\n    // Thuy Vy Pham\r\n    public void displayPuzzle(Rooms currentRoom) {\r\n        System.out.println(\"~~~~~ Puzzle ~~~~~\");\r\n        System.out.println(\"You have encountered a puzzle in this room.\");\r\n        System.out.println(\"~~~~~~~~~~\");\r\n        System.out.println(\"Puzzle: \" + currentRoom.getRoomPuzzle().get(0).getName());\r\n        System.out.println(\"Description: \" + currentRoom.getRoomPuzzle().get(0).getDescription());\r\n        System.out.println(\"~~~~~~~~~~\");\r\n        System.out.println(\"Enter 'solve' to solve the puzzle.\");\r\n    }\r\n\r\n    //Method to solve the puzzle\r\n    // Thuy Vy Pham\r\n    public void solvePuzzle(String solution, ArrayList<Item> playerInventory, ArrayList<Item> listOfItems, Rooms currentRoom, ArrayList<Puzzle> roomPuzzle) {\r\n        if (currentRoom.getRoomPuzzle() != null) {\r\n            String itemToUse = \"\";\r\n            for (Item item : playerInventory) {\r\n                if (item.getItemName().equalsIgnoreCase(currentRoom.getRoomPuzzle().get(0).getItemSolution())) {\r\n                    itemToUse = item.getItemName();\r\n                }\r\n            }\r\n            while (!currentRoom.getRoomPuzzle().get(0).isSolved()) {\r\n                if (solution.equalsIgnoreCase(currentRoom.getRoomPuzzle().get(0).getSolution())) {\r\n                    System.out.println(currentRoom.getRoomPuzzle().get(0).getSolvedMessage());\r\n                    rewardPlayer(currentRoom, listOfItems, roomPuzzle);\r\n                    currentRoom.getRoomPuzzle().get(0).setSolved(true);\r\n                    currentRoom.setRoomPuzzle(null);\r\n                    break;\r\n                } else if (solution.equalsIgnoreCase(itemToUse)) {\r\n                    System.out.println(currentRoom.getRoomPuzzle().get(0).getSolvedMessage());\r\n                    rewardPlayer(currentRoom, listOfItems, roomPuzzle);\r\n                    currentRoom.getRoomPuzzle().get(0).setSolved(true);\r\n                    currentRoom.setRoomPuzzle(null);\r\n                    break;\r\n                } else if (solution.equalsIgnoreCase(\"eot\") || solution.equalsIgnoreCase(\"Eye of Truth\")) {\r\n                    System.out.println(currentRoom.getRoomPuzzle().get(0).getHint());\r\n                    Scanner scanner = new Scanner(System.in);\r\n                    String action = scanner.nextLine();\r\n                    solvePuzzle(action, playerInventory, listOfItems, currentRoom, roomPuzzle);\r\n                } else if (currentRoom.getRoomPuzzle().get(0).getAttemptsLeft() == 1) {\r\n                    System.out.println(currentRoom.getRoomPuzzle().get(0).getFailMessage());\r\n                    malusPlayer(currentRoom, roomPuzzle);\r\n                    currentRoom.getRoomPuzzle().get(0).setSolved(true);\r\n                    break;\r\n                } else {\r\n                    currentRoom.getRoomPuzzle().get(0).setAttemptsLeft(currentRoom.getRoomPuzzle().get(0).getAttemptsLeft() - 1);\r\n                    System.out.println(\" Try again! You have: \" + currentRoom.getRoomPuzzle().get(0).getAttemptsLeft() + \" attempts left.\");\r\n                    Scanner scanner = new Scanner(System.in);\r\n                    String action = scanner.nextLine();\r\n                    solvePuzzle(action, playerInventory, listOfItems, currentRoom, roomPuzzle);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            System.out.println(\"There is no puzzle in this room.\");\r\n        }\r\n    }\r\n\r\n    //Method to reward the player after a puzzle\r\n    // Thuy Vy Pham\r\n    public void rewardPlayer(Rooms currentRoom, ArrayList<Item> listOfItems, ArrayList<Puzzle> roomPuzzle) {\r\n        if (currentRoom.getRoomPuzzle().get(0).getItemReward() != null) {\r\n            System.out.println(\"You have received a \" + currentRoom.getRoomPuzzle().get(0).getItemReward() + \"!\");\r\n            for (Item item : listOfItems) {\r\n                if (item.getItemName().equalsIgnoreCase(currentRoom.getRoomPuzzle().get(0).getItemReward())) {\r\n                    PlayerInventory.add(item);\r\n                }\r\n            }\r\n        }\r\n        if (currentRoom.getRoomPuzzle().get(0).getCoinsReward() != 0) {\r\n            System.out.println(\"You have received \" + currentRoom.getRoomPuzzle().get(0).getCoinsReward() + \" coins!\");\r\n            setPlayerCoins(getPlayerCoins() + currentRoom.getRoomPuzzle().get(0).getCoinsReward());\r\n        }\r\n        if (currentRoom.getRoomPuzzle().get(0).getMagicReward() != 0) {\r\n            System.out.println(\"You have received \" + currentRoom.getRoomPuzzle().get(0).getMagicReward() + \" magic points!\");\r\n            setMagic(getMagic() + currentRoom.getRoomPuzzle().get(0).getMagicReward());\r\n        }\r\n    }\r\n\r\n    //Method to malus the player after a puzzle\r\n    // Thuy Vy Pham\r\n    public void malusPlayer(Rooms currentRoom, ArrayList<Puzzle> roomPuzzle) {\r\n        if (currentRoom.getRoomPuzzle().get(0).getDamageTaken() != 0) {\r\n            System.out.println(\"You have taken \" + currentRoom.getRoomPuzzle().get(0).getDamageTaken() + \" damage!\");\r\n            setHealth(getHealth() - currentRoom.getRoomPuzzle().get(0).getDamageTaken());\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Player.java b/src/Player.java
--- a/src/Player.java	
+++ b/src/Player.java	
@@ -1,3 +1,4 @@
+import java.io.File;
 import java.util.ArrayList;
 import java.util.Scanner;
 
@@ -23,8 +24,8 @@
     private int defense;
     private int playerCoins;
     private Rooms currentRoom;
-    private ArrayList<Item> PlayerInventory;
-    private ArrayList<Spells> PlayerSpells;
+    private ArrayList<Item> playerInventory;
+    private ArrayList<Spells> playerSpells;
     private Equipable equippedItem;
     private int baseHitRate;
     private int hitRate;
@@ -33,8 +34,12 @@
     private int playerLevel;
     private int playerExp;
     private int playerMaxExp;
+    private String name;
+    private String description;
+    private int effects;
+    private int manaCost;
 
-    public Player(int health, int magic, int dexterity, int speed, int mana, int defense, Rooms currentRoom) {
+    public Player(int health, int magic, int dexterity, int speed, int mana, int defense,Rooms currentRoom) {
         this.health = health;
         this.maxHealth = health;
         this.magic = magic;
@@ -45,8 +50,8 @@
         this.defense = defense;
         this.playerCoins = 0;
         this.currentRoom = currentRoom;
-        this.PlayerInventory = new ArrayList<>();
-        this.PlayerSpells = new ArrayList<>();
+        this.playerInventory = playerInventory;
+        this.playerSpells = playerSpells;
         this.equippedItem = null;
         this.baseHitRate = 80;
         this.hitRate = 0;
@@ -140,19 +145,20 @@
     }
 
     public ArrayList<Item> getPlayerInventory() {
-        return PlayerInventory;
+        return playerInventory;
     }
 
     public void setPlayerInventory(ArrayList<Item> playerInventory) {
-        PlayerInventory = playerInventory;
+
+        this.playerInventory = playerInventory;
     }
 
     public ArrayList<Spells> getPlayerSpells() {
-        return PlayerSpells;
+        return playerSpells;
     }
 
     public void setPlayerSpells(ArrayList<Spells> playerSpells) {
-        PlayerSpells = playerSpells;
+        this.playerSpells = playerSpells;
     }
 
     public Equipable getEquippedItem() {
@@ -218,6 +224,23 @@
     public void setPlayerMaxExp(int playerMaxExp) {
         this.playerMaxExp = playerMaxExp;
     }
+    public String getName() {
+        return name;
+    }
+    public int getEffects(){return effects;}
+    public int getManaCost(){return manaCost;}
+
+    public void setManaCost(int manaCost){this.manaCost = manaCost;}
+    public void setEffects(int effects){this.effects = effects;}
+    public void setName(String name) {
+        this.name = name;
+    }
+    public String getDescription() {
+        return description;
+    }
+    public void setDescription(String description) {
+        this.description = description;
+    }
 
     //Method to display the player inventory
     //Thuy Vy
@@ -251,7 +274,7 @@
     // Huyen Pham &  Ginette Wilson
     public void equipItem(String itemName) {
         boolean itemFound = false;
-        for (Item item : PlayerInventory) {
+        for (Item item : playerInventory) {
             if (item.getItemName().equalsIgnoreCase(itemName)) {
                 itemFound = true;
                 if (item instanceof Equipable) {
@@ -308,7 +331,7 @@
     }
 
     //Method to level up the player
-    public void levelUp() {
+    public void levelUp(ArrayList<Spells> spells) {
         if (playerExp >= playerMaxExp && playerLevel < 5) {
             if (playerLevel == 1 && playerExp >= 100) {
                 playerLevel = 2;
@@ -322,6 +345,7 @@
                 setSpeed(getSpeed() + 3);
                 setDexterity(getDexterity() + 8);
                 setDefense(getDefense() + 3);
+                playerSpells.add(spells.get(1));
                 System.out.println("You leveled up to level 2!");
             } else if (playerLevel == 2 && playerExp >= 300) {
                 playerLevel = 3;
@@ -335,6 +359,7 @@
                 setSpeed(getSpeed() + 3);
                 setDexterity(getDexterity() + 5);
                 setDefense(getDefense() + 3);
+                playerSpells.add(spells.get(2));
                 System.out.println("You leveled up to level 3!");
             } else if (playerLevel == 3 && playerExp >= 600) {
                 playerLevel = 4;
@@ -348,6 +373,7 @@
                 setSpeed(getSpeed() + 3);
                 setDexterity(getDexterity() + 5);
                 setDefense(getDefense() + 3);
+                playerSpells.add(spells.get(3));
                 System.out.println("You leveled up to level 4!");
             } else if (playerLevel == 4 && playerExp >= 1000) {
                 playerLevel = 5;
@@ -359,6 +385,7 @@
                 setSpeed(getSpeed() + 4);
                 setDexterity(getDexterity() + 5);
                 setDefense(getDefense() + 3);
+                playerSpells.add(spells.get(4));
                 System.out.println("You leveled up to level 5!");
                 System.out.println("You have reached the maximum level!");
             }
@@ -431,7 +458,7 @@
             System.out.println("You have received a " + currentRoom.getRoomPuzzle().get(0).getItemReward() + "!");
             for (Item item : listOfItems) {
                 if (item.getItemName().equalsIgnoreCase(currentRoom.getRoomPuzzle().get(0).getItemReward())) {
-                    PlayerInventory.add(item);
+                    playerInventory.add(item);
                 }
             }
         }
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_22\" default=\"true\" project-jdk-name=\"openjdk-22 (2)\" project-jdk-type=\"JavaSDK\">\r\n    <output url=\"file://$PROJECT_DIR$/out\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	
+++ b/.idea/misc.xml	
@@ -1,6 +1,6 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
-  <component name="ProjectRootManager" version="2" languageLevel="JDK_22" default="true" project-jdk-name="openjdk-22 (2)" project-jdk-type="JavaSDK">
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_X" default="true" project-jdk-name="openjdk-22 (2)" project-jdk-type="JavaSDK">
     <output url="file://$PROJECT_DIR$/out" />
   </component>
 </project>
\ No newline at end of file
Index: src/Rooms.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>1~Wizard-City~The city had medieval like structures that were home to many wizards. The sidewalks were populated with wizards heading to their destinations as broomsticks traveled along the main road.~2,4,14,10~N/A~N/A~N/A~false~false\r\n2~Wizard-City Hall~The City Hall was pristine. You could see your reflection on the marble floors and the sunlight bouncing off of the gold chandeliers. There were tall wooden podiums and luxurious velvet chairs for each wizard representative who served on the council.~3,0,1,0~N/A~SOL012~N/A~false~false\r\n3~History Vault~Ancient artifacts were scattered everywhere, and scrolls containing historical events and old spells were covered in thick dust. You need to use a lock picking set to examine further inside the history vault.-~0,0,2,0~N/A~SOF012~Pz1~false~false\r\n4~School Courtyard~There's a giant tree rooted in the center of the courtyard that appeared to almost have a face as if it could speak to you. Surrounding it was mosaic stone paths leading to the different wizard schools.~5,7,9,1~N/A~WC014~N/A~false~false\r\n5~School of Ice~Ice glaciers surrounded the school which was constructed entirely of stone bricks and ice crystals that never melt. There was even an ogre frozen in the ground to greet the students and faculty!~0,6,4,0~N/A~SOI012~N/A~false~false\r\n6~Library~There was floor to ceiling shelves packed with dusty books that appeared to have not been touched for centuries. A flying book almost hits you in the head as it zooms by.~0,0,7,5~N/A~SOD014~N/A~false~false\r\n7~School of Fire~A river of lava flowed around the school like a protective barrier. The school itself was constructed with a mixture of stone bricks and wood which were protected with a barrier of dancing flames that didn't seem to bother the students passing by.~6,0,8,4~N/A~SOF015~N/A~false~false\r\n8~Training Grounds~There's an open grass field surrounded by stone brick walls, Dummies made of metal armor were lined up for students to practice their spells.~7,0,0,9~M1~N/A~N/A~false~false\r\n9~School of Death~The gloomy gate felt like you were entering a graveyard as skulls perched on top of the stone pillars. The school was like a haunted house, yet still lively with the presence of students and faculty.~4,8,0,0~N/A~SOD011~N/A~false~false\r\n10~Shopping District~The buildings wrapped around to form a cul-de-sac. There were shops lined up next to each that provided for every wizard's needs.~11,1,13,12~N/A~SOL014~N/A~false~false\r\n11~Potion Shop~Several glass bottles both empty and filled were scattered all over the tables and shelves. Various ingredients were stored in oddly, shaped vases almost like a mad scientist's lab. Yet, the shopkeeper always knew exactly where everything was.~0,0,10,0~N/A~SOI011,SOI115,SOF015,SOL011,SOL013,A1,A4,A5~N/A~false~true\r\n12~Trading Post~The trading post was busy as always with wizards bartering and trading with each other. Goods were scattered everywhere as trades were being made.~0,10,0,0~N/A~N/A~N/A~false~false\r\n13~Wand Shop~The shop was dimly lit yet cozy and almost comforting. Small spotlights shone onto the endless shelves of wizards wands tucked away in boxes that longs for a new owner.~10,0,0,0~N/A~WC012,WC013,SOI013,SOI014,SOF013,SOF014,SOL011,SOD013~N/A~false~true\r\n14~Enchanted Forest~The sunlight shines through the luscious green trees that engulf the grassy fields. There is a dirt path carved into the ground, snaking its way through the forest. Footprints imprinted on the ground reveal the presence of previous explorers.~1,15,24,19~M6~N/A~N/A~false~false\r\n15~Ogre Swamp~Willow trees droop over the green murky waters while striders slide across the surface and croaking frogs splash around. In the distance, the grunts of an ogre can be heard as they go about their day.~16,18,0,14~M11~N/A~N/A~false~false\r\n16~Scorched Highlands~The rocky terrain is scorched by the fiery breaths of dragons that soar from above. All that remains of the previous plant life is nothing but black ashes.~0,17,15,0~M2~SOF011~Pz4~false~false\r\n17~Dragon Mountain~The tallest point in the Enchanted Forest and home to the dragons. The cliffs are jagged and the wind whistles though the air. You can see Wizard City from here!~0,0,18,16~M8~N/A~N/A~false~false\r\n18~Boggy Marshlands~Tall blades of grass sprouted from the body of water that barely stood taller than your ankles. Crickets and frogs can be heard in the distance as birds splashed against the shallow waters.~17,0,0,15~M4,M15~N/A~N/A~false~false\r\n19~Unicorn Oasis~A small stream winded through the oasis unicorns frolicked through the luscious green grass and drank from the fresh water.~20,14,23,22~M9~N/A~N/A~false~false\r\n20~Glowing Glade~It was a large grassy field with very minimal trees as a gentle breeze blew by. The sunlight shined down on the swaying grass, creating the illusion that the ground was glowing.~0,0,19,21~M18~N/A~N/A~false~false\r\n21~Traveler’s Tavern~The tavern had cozy wooden exterior with stained glass windows. As you enter, you're greeted with the smell of alcohol and the jumbled conversations as wizards cheerfully clink their glasses in the air and exchange stories of their journeys.~0,20,22,0~N/A~N/A~Pz2~false~false\r\n22~Rainbow Falls~You are greeted with the roaring sounds of a grand waterfall. The glistening waters reflect a beautiful, blight waterfall.~21,19,0,0~M5,M19~N/A~N/A~false~false\r\n23~Whispering Gardens~The gardens were filled with countless different species of flowers. Besides the gentle buzzing of the bees, there were playful whispers from the fairies and pixies that took on the form of tiny little specks to lease visitors.~19,0,0,0~M10~N/A~Pz6~false~false\r\n24~Obsidian Sanctum~There's an opening in the earth that connects the over world to the underground. The walls are made from smooth, black obsidian and the dirt crunches beneath your feet.~14,25,27,30~M7~N/A~Pz3~false~false\r\n25~Mystic Caverns~All you could hear were the gentle water droplets that fell from the cavern's ceiling and onto the sparkling amethyst crystals that illuminated in the dark.~0,0,26,24~M13~N/A~N/A~false~false\r\n26~Abandoned Mine~The air was stale and you could feel the cold air that was being emitted from the rough rock walls. There were sparkling ores half exposed in the earth and creaking noises from the ages wooden support beams.~25,0,0,27~M17,M14~SOD013~Pz5~false~false\r\n27~Dungeon of Solitude~Shadows lingered throughout the dark dungeon as rusty chains echoed in the distance. Many of the iron bar cells remain swinging open and the locks have already rusted with time.~24,26,28,29~M12~N/A~N/A~false~false\r\n28~LostCity of Eldorath~Grass had broken through the cobblestone ground as vines overtook the abandoned building, The city appeared to have been home to a civilian many centuries ago, but something clearly drove them out.~27,0,0,0~M20~SOL015~Pz7~false~false\r\n29~Abyssal Chamber~The darkness was as endless as an abyss. No matter how much light you wand produced, it was never enough to see as your footsteps echoed through the eerie silence.~30,27,0,0~M16~N/A~N/A~false~false\r\n30~Forgotten Catacombs~Spiders and cobwebs hung from above in this maze like space. You're accompanied by the crunching of shattered bones as you walked.~0,24,29,0~M3,M1~SOD012~N/A~false~false
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Rooms.txt b/src/Rooms.txt
--- a/src/Rooms.txt	
+++ b/src/Rooms.txt	
@@ -13,7 +13,7 @@
 13~Wand Shop~The shop was dimly lit yet cozy and almost comforting. Small spotlights shone onto the endless shelves of wizards wands tucked away in boxes that longs for a new owner.~10,0,0,0~N/A~WC012,WC013,SOI013,SOI014,SOF013,SOF014,SOL011,SOD013~N/A~false~true
 14~Enchanted Forest~The sunlight shines through the luscious green trees that engulf the grassy fields. There is a dirt path carved into the ground, snaking its way through the forest. Footprints imprinted on the ground reveal the presence of previous explorers.~1,15,24,19~M6~N/A~N/A~false~false
 15~Ogre Swamp~Willow trees droop over the green murky waters while striders slide across the surface and croaking frogs splash around. In the distance, the grunts of an ogre can be heard as they go about their day.~16,18,0,14~M11~N/A~N/A~false~false
-16~Scorched Highlands~The rocky terrain is scorched by the fiery breaths of dragons that soar from above. All that remains of the previous plant life is nothing but black ashes.~0,17,15,0~M2~SOF011~Pz4~false~false
+16~Scorched Highlands~The rocky terrain is scorched by the fiery breaths of dragons that soar from above. All that remains of the previous plant life is nothing but black ashes.~0,17,15,0~M2~SOF011~N/A~false~false
 17~Dragon Mountain~The tallest point in the Enchanted Forest and home to the dragons. The cliffs are jagged and the wind whistles though the air. You can see Wizard City from here!~0,0,18,16~M8~N/A~N/A~false~false
 18~Boggy Marshlands~Tall blades of grass sprouted from the body of water that barely stood taller than your ankles. Crickets and frogs can be heard in the distance as birds splashed against the shallow waters.~17,0,0,15~M4,M15~N/A~N/A~false~false
 19~Unicorn Oasis~A small stream winded through the oasis unicorns frolicked through the luscious green grass and drank from the fresh water.~20,14,23,22~M9~N/A~N/A~false~false
@@ -21,9 +21,9 @@
 21~Traveler’s Tavern~The tavern had cozy wooden exterior with stained glass windows. As you enter, you're greeted with the smell of alcohol and the jumbled conversations as wizards cheerfully clink their glasses in the air and exchange stories of their journeys.~0,20,22,0~N/A~N/A~Pz2~false~false
 22~Rainbow Falls~You are greeted with the roaring sounds of a grand waterfall. The glistening waters reflect a beautiful, blight waterfall.~21,19,0,0~M5,M19~N/A~N/A~false~false
 23~Whispering Gardens~The gardens were filled with countless different species of flowers. Besides the gentle buzzing of the bees, there were playful whispers from the fairies and pixies that took on the form of tiny little specks to lease visitors.~19,0,0,0~M10~N/A~Pz6~false~false
-24~Obsidian Sanctum~There's an opening in the earth that connects the over world to the underground. The walls are made from smooth, black obsidian and the dirt crunches beneath your feet.~14,25,27,30~M7~N/A~Pz3~false~false
+24~Obsidian Sanctum~There's an opening in the earth that connects the over world to the underground. The walls are made from smooth, black obsidian and the dirt crunches beneath your feet.~14,25,27,30~M7~N/A~N/A~false~false
 25~Mystic Caverns~All you could hear were the gentle water droplets that fell from the cavern's ceiling and onto the sparkling amethyst crystals that illuminated in the dark.~0,0,26,24~M13~N/A~N/A~false~false
-26~Abandoned Mine~The air was stale and you could feel the cold air that was being emitted from the rough rock walls. There were sparkling ores half exposed in the earth and creaking noises from the ages wooden support beams.~25,0,0,27~M17,M14~SOD013~Pz5~false~false
+26~Abandoned Mine~The air was stale and you could feel the cold air that was being emitted from the rough rock walls. There were sparkling ores half exposed in the earth and creaking noises from the ages wooden support beams.~25,0,0,27~M17,M14~SOD013~N/A~false~false
 27~Dungeon of Solitude~Shadows lingered throughout the dark dungeon as rusty chains echoed in the distance. Many of the iron bar cells remain swinging open and the locks have already rusted with time.~24,26,28,29~M12~N/A~N/A~false~false
 28~LostCity of Eldorath~Grass had broken through the cobblestone ground as vines overtook the abandoned building, The city appeared to have been home to a civilian many centuries ago, but something clearly drove them out.~27,0,0,0~M20~SOL015~Pz7~false~false
 29~Abyssal Chamber~The darkness was as endless as an abyss. No matter how much light you wand produced, it was never enough to see as your footsteps echoed through the eerie silence.~30,27,0,0~M16~N/A~N/A~false~false
Index: out/production/TeamAvengers-Spring2024/Rooms.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>1~Wizard-City~The city had medieval like structures that were home to many wizards. The sidewalks were populated with wizards heading to their destinations as broomsticks traveled along the main road.~2,4,14,10~N/A~N/A~N/A~false~false\r\n2~Wizard-City Hall~The City Hall was pristine. You could see your reflection on the marble floors and the sunlight bouncing off of the gold chandeliers. There were tall wooden podiums and luxurious velvet chairs for each wizard representative who served on the council.~3,0,1,0~N/A~SOL012~N/A~false~false\r\n3~History Vault~Ancient artifacts were scattered everywhere, and scrolls containing historical events and old spells were covered in thick dust. You need to use a lock picking set to examine further inside the history vault.-~0,0,2,0~N/A~SOF012~Pz1~false~false\r\n4~School Courtyard~There's a giant tree rooted in the center of the courtyard that appeared to almost have a face as if it could speak to you. Surrounding it was mosaic stone paths leading to the different wizard schools.~5,7,9,1~N/A~WC014~N/A~false~false\r\n5~School of Ice~Ice glaciers surrounded the school which was constructed entirely of stone bricks and ice crystals that never melt. There was even an ogre frozen in the ground to greet the students and faculty!~0,6,4,0~N/A~SOI012~N/A~false~false\r\n6~Library~There was floor to ceiling shelves packed with dusty books that appeared to have not been touched for centuries. A flying book almost hits you in the head as it zooms by.~0,0,7,5~N/A~SOD014~N/A~false~false\r\n7~School of Fire~A river of lava flowed around the school like a protective barrier. The school itself was constructed with a mixture of stone bricks and wood which were protected with a barrier of dancing flames that didn't seem to bother the students passing by.~6,0,8,4~N/A~SOF015~N/A~false~false\r\n8~Training Grounds~There's an open grass field surrounded by stone brick walls, Dummies made of metal armor were lined up for students to practice their spells.~7,0,0,9~M1~N/A~N/A~false~false\r\n9~School of Death~The gloomy gate felt like you were entering a graveyard as skulls perched on top of the stone pillars. The school was like a haunted house, yet still lively with the presence of students and faculty.~4,8,0,0~N/A~SOD011~N/A~false~false\r\n10~Shopping District~The buildings wrapped around to form a cul-de-sac. There were shops lined up next to each that provided for every wizard's needs.~11,1,13,12~N/A~SOL014~N/A~false~false\r\n11~Potion Shop~Several glass bottles both empty and filled were scattered all over the tables and shelves. Various ingredients were stored in oddly, shaped vases almost like a mad scientist's lab. Yet, the shopkeeper always knew exactly where everything was.~0,0,10,0~N/A~SOI011,SOI115,SOF015,SOL011,SOL013,A1,A4,A5~N/A~false~true\r\n12~Trading Post~The trading post was busy as always with wizards bartering and trading with each other. Goods were scattered everywhere as trades were being made.~0,10,0,0~N/A~N/A~N/A~false~false\r\n13~Wand Shop~The shop was dimly lit yet cozy and almost comforting. Small spotlights shone onto the endless shelves of wizards wands tucked away in boxes that longs for a new owner.~10,0,0,0~N/A~WC012,WC013,SOI013,SOI014,SOF013,SOF014,SOL011,SOD013~N/A~false~true\r\n14~Enchanted Forest~The sunlight shines through the luscious green trees that engulf the grassy fields. There is a dirt path carved into the ground, snaking its way through the forest. Footprints imprinted on the ground reveal the presence of previous explorers.~1,15,24,19~M6~N/A~N/A~false~false\r\n15~Ogre Swamp~Willow trees droop over the green murky waters while striders slide across the surface and croaking frogs splash around. In the distance, the grunts of an ogre can be heard as they go about their day.~16,18,0,14~M11~N/A~N/A~false~false\r\n16~Scorched Highlands~The rocky terrain is scorched by the fiery breaths of dragons that soar from above. All that remains of the previous plant life is nothing but black ashes.~0,17,15,0~M2~SOF011~Pz4~false~false\r\n17~Dragon Mountain~The tallest point in the Enchanted Forest and home to the dragons. The cliffs are jagged and the wind whistles though the air. You can see Wizard City from here!~0,0,18,16~M8~N/A~N/A~false~false\r\n18~Boggy Marshlands~Tall blades of grass sprouted from the body of water that barely stood taller than your ankles. Crickets and frogs can be heard in the distance as birds splashed against the shallow waters.~17,0,0,15~M4,M15~N/A~N/A~false~false\r\n19~Unicorn Oasis~A small stream winded through the oasis unicorns frolicked through the luscious green grass and drank from the fresh water.~20,14,23,22~M9~N/A~N/A~false~false\r\n20~Glowing Glade~It was a large grassy field with very minimal trees as a gentle breeze blew by. The sunlight shined down on the swaying grass, creating the illusion that the ground was glowing.~0,0,19,21~M18~N/A~N/A~false~false\r\n21~Traveler’s Tavern~The tavern had cozy wooden exterior with stained glass windows. As you enter, you're greeted with the smell of alcohol and the jumbled conversations as wizards cheerfully clink their glasses in the air and exchange stories of their journeys.~0,20,22,0~N/A~N/A~Pz2~false~false\r\n22~Rainbow Falls~You are greeted with the roaring sounds of a grand waterfall. The glistening waters reflect a beautiful, blight waterfall.~21,19,0,0~M5,M19~N/A~N/A~false~false\r\n23~Whispering Gardens~The gardens were filled with countless different species of flowers. Besides the gentle buzzing of the bees, there were playful whispers from the fairies and pixies that took on the form of tiny little specks to lease visitors.~19,0,0,0~M10~N/A~Pz6~false~false\r\n24~Obsidian Sanctum~There's an opening in the earth that connects the over world to the underground. The walls are made from smooth, black obsidian and the dirt crunches beneath your feet.~14,25,27,30~M7~N/A~Pz3~false~false\r\n25~Mystic Caverns~All you could hear were the gentle water droplets that fell from the cavern's ceiling and onto the sparkling amethyst crystals that illuminated in the dark.~0,0,26,24~M13~N/A~N/A~false~false\r\n26~Abandoned Mine~The air was stale and you could feel the cold air that was being emitted from the rough rock walls. There were sparkling ores half exposed in the earth and creaking noises from the ages wooden support beams.~25,0,0,27~M17,M14~SOD013~Pz5~false~false\r\n27~Dungeon of Solitude~Shadows lingered throughout the dark dungeon as rusty chains echoed in the distance. Many of the iron bar cells remain swinging open and the locks have already rusted with time.~24,26,28,29~M12~N/A~N/A~false~false\r\n28~LostCity of Eldorath~Grass had broken through the cobblestone ground as vines overtook the abandoned building, The city appeared to have been home to a civilian many centuries ago, but something clearly drove them out.~27,0,0,0~M20~SOL015~Pz7~false~false\r\n29~Abyssal Chamber~The darkness was as endless as an abyss. No matter how much light you wand produced, it was never enough to see as your footsteps echoed through the eerie silence.~30,27,0,0~M16~N/A~N/A~false~false\r\n30~Forgotten Catacombs~Spiders and cobwebs hung from above in this maze like space. You're accompanied by the crunching of shattered bones as you walked.~0,24,29,0~M3,M1~SOD012~N/A~false~false
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/out/production/TeamAvengers-Spring2024/Rooms.txt b/out/production/TeamAvengers-Spring2024/Rooms.txt
--- a/out/production/TeamAvengers-Spring2024/Rooms.txt	
+++ b/out/production/TeamAvengers-Spring2024/Rooms.txt	
@@ -13,7 +13,7 @@
 13~Wand Shop~The shop was dimly lit yet cozy and almost comforting. Small spotlights shone onto the endless shelves of wizards wands tucked away in boxes that longs for a new owner.~10,0,0,0~N/A~WC012,WC013,SOI013,SOI014,SOF013,SOF014,SOL011,SOD013~N/A~false~true
 14~Enchanted Forest~The sunlight shines through the luscious green trees that engulf the grassy fields. There is a dirt path carved into the ground, snaking its way through the forest. Footprints imprinted on the ground reveal the presence of previous explorers.~1,15,24,19~M6~N/A~N/A~false~false
 15~Ogre Swamp~Willow trees droop over the green murky waters while striders slide across the surface and croaking frogs splash around. In the distance, the grunts of an ogre can be heard as they go about their day.~16,18,0,14~M11~N/A~N/A~false~false
-16~Scorched Highlands~The rocky terrain is scorched by the fiery breaths of dragons that soar from above. All that remains of the previous plant life is nothing but black ashes.~0,17,15,0~M2~SOF011~Pz4~false~false
+16~Scorched Highlands~The rocky terrain is scorched by the fiery breaths of dragons that soar from above. All that remains of the previous plant life is nothing but black ashes.~0,17,15,0~M2~SOF011~N/A~false~false
 17~Dragon Mountain~The tallest point in the Enchanted Forest and home to the dragons. The cliffs are jagged and the wind whistles though the air. You can see Wizard City from here!~0,0,18,16~M8~N/A~N/A~false~false
 18~Boggy Marshlands~Tall blades of grass sprouted from the body of water that barely stood taller than your ankles. Crickets and frogs can be heard in the distance as birds splashed against the shallow waters.~17,0,0,15~M4,M15~N/A~N/A~false~false
 19~Unicorn Oasis~A small stream winded through the oasis unicorns frolicked through the luscious green grass and drank from the fresh water.~20,14,23,22~M9~N/A~N/A~false~false
@@ -21,9 +21,9 @@
 21~Traveler’s Tavern~The tavern had cozy wooden exterior with stained glass windows. As you enter, you're greeted with the smell of alcohol and the jumbled conversations as wizards cheerfully clink their glasses in the air and exchange stories of their journeys.~0,20,22,0~N/A~N/A~Pz2~false~false
 22~Rainbow Falls~You are greeted with the roaring sounds of a grand waterfall. The glistening waters reflect a beautiful, blight waterfall.~21,19,0,0~M5,M19~N/A~N/A~false~false
 23~Whispering Gardens~The gardens were filled with countless different species of flowers. Besides the gentle buzzing of the bees, there were playful whispers from the fairies and pixies that took on the form of tiny little specks to lease visitors.~19,0,0,0~M10~N/A~Pz6~false~false
-24~Obsidian Sanctum~There's an opening in the earth that connects the over world to the underground. The walls are made from smooth, black obsidian and the dirt crunches beneath your feet.~14,25,27,30~M7~N/A~Pz3~false~false
+24~Obsidian Sanctum~There's an opening in the earth that connects the over world to the underground. The walls are made from smooth, black obsidian and the dirt crunches beneath your feet.~14,25,27,30~M7~N/A~N/A~false~false
 25~Mystic Caverns~All you could hear were the gentle water droplets that fell from the cavern's ceiling and onto the sparkling amethyst crystals that illuminated in the dark.~0,0,26,24~M13~N/A~N/A~false~false
-26~Abandoned Mine~The air was stale and you could feel the cold air that was being emitted from the rough rock walls. There were sparkling ores half exposed in the earth and creaking noises from the ages wooden support beams.~25,0,0,27~M17,M14~SOD013~Pz5~false~false
+26~Abandoned Mine~The air was stale and you could feel the cold air that was being emitted from the rough rock walls. There were sparkling ores half exposed in the earth and creaking noises from the ages wooden support beams.~25,0,0,27~M17,M14~SOD013~N/A~false~false
 27~Dungeon of Solitude~Shadows lingered throughout the dark dungeon as rusty chains echoed in the distance. Many of the iron bar cells remain swinging open and the locks have already rusted with time.~24,26,28,29~M12~N/A~N/A~false~false
 28~LostCity of Eldorath~Grass had broken through the cobblestone ground as vines overtook the abandoned building, The city appeared to have been home to a civilian many centuries ago, but something clearly drove them out.~27,0,0,0~M20~SOL015~Pz7~false~false
 29~Abyssal Chamber~The darkness was as endless as an abyss. No matter how much light you wand produced, it was never enough to see as your footsteps echoed through the eerie silence.~30,27,0,0~M16~N/A~N/A~false~false
