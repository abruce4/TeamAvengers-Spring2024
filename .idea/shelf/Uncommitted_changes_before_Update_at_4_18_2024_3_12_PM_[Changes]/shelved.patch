Index: src/Game.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.io.*;\r\nimport java.util.Scanner;\r\nimport java.util.ArrayList;\r\n\r\n/**Class: Game\r\n * @author Team Avengers / Ginette Wilson\r\n * @version 1.0\r\n * Course: ITEC 3860 Spring 2024\r\n * Written: Apr 10, 2024\r\n * This class handles the game logic and user input\r\n */\r\n\r\npublic class Game implements Serializable {\r\n\r\n\r\n    private int currentRoom = 0;\r\n    private transient Scanner scan;\r\n    private boolean gameOver;\r\n    private transient Scanner scanner;\r\n    private Player mainCharacter;\r\n\r\n    // File paths for game elements\r\n    //Ginette Wilson\r\n    private static final String ITEMS_FILE_PATH = \"src/Items.txt\";\r\n    private static final String PUZZLES_FILE_PATH = \"src/Puzzles.txt\";\r\n    private static final String MONSTERS_FILE_PATH = \"src/Monsters.txt\";\r\n    private static final String ROOMS_FILE_PATH = \"src/Rooms.txt\";\r\n    private static final String SPELLS_FILE_PATH = \"src/Spells.txt\";\r\n\r\n    // ArrayList to store game elements\r\n    //Ginette Wilson\r\n    private static final ArrayList<Item> listOfItems = new ArrayList<>();\r\n    private static final ArrayList<Puzzle> listOfPuzzles = new ArrayList<>();\r\n    private static final ArrayList<Monster> listOfMonsters = new ArrayList<>();\r\n    private static final ArrayList<Rooms> listOfRooms = new ArrayList<>();\r\n    private static final ArrayList<Spells> listOfSpells = new ArrayList<>();\r\n\r\n    //Ginette Wilson\r\n    public Game() {\r\n        loadGameElements();// Initialize the game map\r\n        RoomParsing roomParsing = new RoomParsing();\r\n        System.out.println(listOfRooms.get(1).getRoomInventory());\r\n        gameOver = false; // Game over flag\r\n        scanner = new Scanner(System.in); // Scanner for user input\r\n        currentRoom = 0;\r\n        mainCharacter = new Player(25, 10, 10, 7, 20, 5, listOfRooms.get(0));\r\n    }\r\n\r\n    //Method to load game elements\r\n    //Ginette Wilson\r\n    private static void loadGameElements() {\r\n        Item.readItems(ITEMS_FILE_PATH, listOfItems);\r\n        Puzzle.readPuzzles(PUZZLES_FILE_PATH, listOfPuzzles);\r\n        Monster.readMonsters(MONSTERS_FILE_PATH, listOfMonsters);\r\n        Rooms.readRooms(ROOMS_FILE_PATH, listOfRooms);\r\n        Spells.readSpells(SPELLS_FILE_PATH, listOfSpells);\r\n        addItemsToRoom(listOfItems, listOfRooms);\r\n    }\r\n\r\n    //Method to add items to the room\r\n    //Lincoln Bruce\r\n    public static void addItemsToRoom(ArrayList<Item> listOfItems, ArrayList<Rooms> listOfRooms) {\r\n        for (Rooms room : listOfRooms) {\r\n            for (Item item : listOfItems) {\r\n                if (room.getItemsIncluded().contains(item.getItemID())) {\r\n                    room.getRoomInventory().add(item);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    //Method to run the game\r\n    //Kenny Amador\r\n    public void RunGame() {\r\n        //Player mainCharacter = new Player(25, 10, 10, 7, 20, 5, listOfRooms.get(0));\r\n        System.out.println(\"Press q at any time if you wish to quit or y to continue\");\r\n        scan = new Scanner(System.in);\r\n        Rooms currentRooms = listOfRooms.get(currentRoom);\r\n        currentRooms.setHasBeenVisited(true);\r\n        System.out.println(currentRooms.getRoomName() + \": \" + currentRooms.getDescription());\r\n        String command = scan.next();\r\n        while (!command.equalsIgnoreCase(\"save\")) { //set a condition in which the player can exit the game when wanted and by doing this the save/load automatically gets executed\r\n            System.out.println(\"Please enter a navigation command north,east,south,west to move around\");\r\n            scan = new Scanner(System.in);\r\n            command = scan.nextLine();\r\n            currentRoom = checkCommand(command, currentRooms, mainCharacter);\r\n            if (currentRoom == -1) {\r\n                System.out.println(\"You cannot go in this direction\");\r\n                continue;\r\n            }\r\n            currentRooms = listOfRooms.get(currentRoom);\r\n            checkRoom(currentRooms);\r\n            System.out.println(currentRooms.getRoomName() + \": \" + currentRooms.getDescription());\r\n            currentRooms.setHasBeenVisited(true);\r\n        }\r\n    }\r\n    public void checkRoom(Rooms rooms){\r\n        if (rooms.getHasBeenVisited() == true) {\r\n            System.out.println(\"You have been here before\");\r\n        }\r\n    }\r\n\r\n\r\n    //Method to check the command\r\n    //Kenny Amador\r\n    public int checkCommand(String command, Rooms rooms, Player mainCharacter) {\r\n        ArrayList<Integer> connects = rooms.roomExits;\r\n        if (command.equalsIgnoreCase(\"north\")) {\r\n            return connects.get(0) - 1;\r\n        }\r\n        if (command.equalsIgnoreCase(\"east\")) {\r\n            return connects.get(1) - 1;\r\n        }\r\n        if (command.equalsIgnoreCase(\"south\")) {\r\n            return connects.get(2) - 1;\r\n        }\r\n        if (command.equalsIgnoreCase(\"west\")) {\r\n            return connects.get(3) - 1;\r\n        }\r\n        if (command.equalsIgnoreCase(\"look\")) {\r\n            displayItems(rooms);\r\n            return currentRoom;\r\n        }\r\n        if (command.equalsIgnoreCase(\"inspect\")) {\r\n            System.out.println(\"Which item would you like to inspect?\");\r\n            command = scan.nextLine();\r\n            inspectItem(command, mainCharacter);\r\n            return currentRoom;\r\n        }\r\n        if (command.equalsIgnoreCase(\"pickup\")) {\r\n            System.out.println(\"Which item would you like to pick up?\");\r\n            command = scan.nextLine();\r\n            pickup(command, mainCharacter, rooms);\r\n            return currentRoom;\r\n        }\r\n        if (command.equalsIgnoreCase(\"drop\")) {\r\n            System.out.println(\"Which item would you like to drop?\");\r\n            command = scan.nextLine();\r\n            drop(command, mainCharacter, rooms);\r\n            return currentRoom;\r\n        }\r\n        if(command.equalsIgnoreCase(\"stats\")){\r\n            displayStats();\r\n            return currentRoom;\r\n        }\r\n        if (command.equalsIgnoreCase(\"save\")) {\r\n            return currentRoom;\r\n        }\r\n\r\n        return -1;\r\n    }\r\n\r\n    //Method to display items in the room\r\n    //Kenny Amador\r\n    public void displayItems(Rooms rooms) {\r\n        if (rooms.itemsIncluded.get(0).equalsIgnoreCase(\"n/a\")) {\r\n            System.out.println(\"There are no items in this room\");\r\n        } else {\r\n            System.out.print(\"Items in this room: \");\r\n            for (Item item : rooms.getRoomInventory()) {\r\n                System.out.print(item + \",\");\r\n            }\r\n            System.out.println();\r\n        }\r\n    }//end displayItems\r\n\r\n    // Method to inspect an item in the current room\r\n    //Huyen Pham\r\n    public void inspectItem(String itemName, Player mainCharacter) {\r\n        for (Item item : mainCharacter.getPlayerInventory()) {\r\n            if (item.getItemName().equalsIgnoreCase(itemName)) {\r\n                System.out.println(\"Inspecting: \" + itemName);\r\n                System.out.println(\"Description: \" + item.getItemDescription());\r\n                System.out.println(\"Type: \" + item.getItemType());\r\n                System.out.println(\"Value: \" + item.getItemValue());\r\n                return;\r\n            }\r\n        }\r\n        System.out.println(itemName + \" is not in your inventory.\");\r\n    }//end inspectItem\r\n\r\n    //Method to drop an item\r\n    //Thuy Vy\r\n    public void drop(String itemName, Player mainCharacter, Rooms currentRoom) {\r\n        for (Item item : mainCharacter.getPlayerInventory()) {\r\n            if (item.getItemName().equalsIgnoreCase(itemName)) {\r\n                mainCharacter.getPlayerInventory().remove(item);\r\n                currentRoom.getRoomInventory().add(item);\r\n                System.out.println(itemName + \" has been dropped from your inventory.\");\r\n                return;\r\n            }\r\n        }\r\n        System.out.println(\"You don't have \" + itemName + \" in your inventory.\");\r\n    }//end drop\r\n\r\n    //Method to pick up an item\r\n    //Thuy Vy\r\n    public void pickup(String itemName, Player mainCharacter, Rooms currentRoom) {\r\n        for (Item item : currentRoom.getRoomInventory()) {\r\n            if (item.getItemName().equalsIgnoreCase(itemName)) {\r\n                mainCharacter.getPlayerInventory().add(item);\r\n                currentRoom.getRoomInventory().remove(item);\r\n                System.out.println(itemName + \" has been added to your inventory.\");\r\n                return;\r\n            }\r\n        }\r\n        System.out.println(\"There is no \" + itemName + \" in this room.\");\r\n    }\r\n\r\n    public void displayStats(){\r\n        System.out.println(\"~~~~~~~~~~\");\r\n        System.out.println(\"Health: \" + mainCharacter.getHealth());\r\n        System.out.println(\"Attack: \" + mainCharacter.getAttack());\r\n        System.out.println(\"Dexterity: \" + mainCharacter.getDexterity());\r\n        System.out.println(\"Speed: \" + mainCharacter.getSpeed());\r\n        System.out.println(\"Mana: \" + mainCharacter.getMana());\r\n        System.out.println(\"Defense: \" + mainCharacter.getDefense());\r\n        System.out.println(\"~~~~~~~~~~\");\r\n    }\r\n}//end Game
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Game.java b/src/Game.java
--- a/src/Game.java	(revision b5fb9f142f7a53d2badc8e8b3031b7a4f03c01d9)
+++ b/src/Game.java	(date 1713396100882)
@@ -158,7 +158,7 @@
         } else {
             System.out.print("Items in this room: ");
             for (Item item : rooms.getRoomInventory()) {
-                System.out.print(item + ",");
+                System.out.print("[" + item + "]");
             }
             System.out.println();
         }
